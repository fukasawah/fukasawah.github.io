<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>fukasawah.github.io</title>
    <link>https://fukasawah.github.io/</link>
    <description>Recent content on fukasawah.github.io</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 24 Jun 2019 00:58:49 +0900</lastBuildDate>
    
	<atom:link href="https://fukasawah.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>PulumiでAzureのリソースを構成する</title>
      <link>https://fukasawah.github.io/posts/2019/06/24/configure-azure-resources-with-pulumi/</link>
      <pubDate>Mon, 24 Jun 2019 00:58:49 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/06/24/configure-azure-resources-with-pulumi/</guid>
      <description>PulumiはIndrastracture as Codeを実現するソフトウェア。 Azure Resource Manager(Template)やTerraformで出来</description>
    </item>
    
    <item>
      <title>MCP資格のAZ-103に不合格しました</title>
      <link>https://fukasawah.github.io/posts/2019/05/25/fail-an-examination-az-103/</link>
      <pubDate>Sat, 25 May 2019 14:20:19 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/05/25/fail-an-examination-az-103/</guid>
      <description>700点で合格、結果530点でダメでした。かすりもしねえ・・・ 気になってたことがわかったり、問題形式とかわかったのでメモしておく。あと考えて</description>
    </item>
    
    <item>
      <title>JJUG CCC 2019 Spring いってきた</title>
      <link>https://fukasawah.github.io/posts/2019/05/18/report-jjug-ccc-2019-spring/</link>
      <pubDate>Sat, 18 May 2019 20:36:00 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/05/18/report-jjug-ccc-2019-spring/</guid>
      <description>いってきました。 [English] DevOps without Measurement is a Fail (Erno Venäläinen) @venalainene 英語聞き取れないマンだけど英語のセッションを選んだ。 スライドと話している雰囲気で理解</description>
    </item>
    
    <item>
      <title>Basic Authentication on Nginx</title>
      <link>https://fukasawah.github.io/posts/2019/03/27/basic-authentication-on-nginx/</link>
      <pubDate>Wed, 27 Mar 2019 02:08:03 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/03/27/basic-authentication-on-nginx/</guid>
      <description>Apache Httpdのツールとして提供されているhtpasswdコマンドを使うのが良い。 （最初はpythonで自前で計算しようとしたが、思っていた以</description>
    </item>
    
    <item>
      <title>NginxのVirtualhost設定～WildcardSSL証明書を添えて～</title>
      <link>https://fukasawah.github.io/posts/2019/03/26/virtualhost-nginx-with-wildcard-ssl/</link>
      <pubDate>Tue, 26 Mar 2019 04:10:14 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/03/26/virtualhost-nginx-with-wildcard-ssl/</guid>
      <description>以前の手順でWildcardなSSL証明書ができたので、これを使ってvirtualhost運用をしてみたい。 ただ、このとき、証明書の設定箇所</description>
    </item>
    
    <item>
      <title>Install PostgreSQL 11 on CentOS 7</title>
      <link>https://fukasawah.github.io/posts/2019/03/26/install-postgresql-11-on-centos7/</link>
      <pubDate>Tue, 26 Mar 2019 03:23:23 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/03/26/install-postgresql-11-on-centos7/</guid>
      <description>PostgreSQL 11の導入 pg_bigmの導入 最新版はPostgreSQLのページから得られるリポジトリからインストールできる。 https://yum.postgresql.org/repopackages.php#pg11 PostgreSQL 11の導入 リポジトリの</description>
    </item>
    
    <item>
      <title>PostgreSQLのユーザ管理</title>
      <link>https://fukasawah.github.io/posts/2019/03/26/postgresql-11-usermanagement/</link>
      <pubDate>Tue, 26 Mar 2019 03:23:23 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/03/26/postgresql-11-usermanagement/</guid>
      <description>sudo -u postgres createuser --no-createdb --login --pwprompt --no-createrole --no-superuser --pwprompt testuser psqlで接続できるか確認する。 psql -U testuser testdb DBに関しては特に指定は無くても、存在すればアクセスできる。テーブルも作れる。</description>
    </item>
    
    <item>
      <title>VPS ServerのセットアップとLetsEncryptによる証明書取得と利用まで(Google Cloud DNS Service)</title>
      <link>https://fukasawah.github.io/posts/2019/03/25/vps-server-setup-with-letsencrypt/</link>
      <pubDate>Mon, 25 Mar 2019 02:16:16 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/03/25/vps-server-setup-with-letsencrypt/</guid>
      <description>まずは入っているパッケージを適当に最新化 yum update reboot ユーザを作る # ユーザ作成 useradd fukasawah # パスワード設定 passwd fukasawah # wheelを与えてsudoを使えるようにする</description>
    </item>
    
    <item>
      <title>GNU ldで一部をスタティックリンクにする</title>
      <link>https://fukasawah.github.io/posts/2019/01/07/a-part-static-link-in-gnu-ld/</link>
      <pubDate>Mon, 07 Jan 2019 03:15:17 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2019/01/07/a-part-static-link-in-gnu-ld/</guid>
      <description>tl;dr gccなら-Wl,...でリンク時のオプション(==ldコマンドのオプション)を渡せる。オプションが複数ある場合はカンマで繋げる。 ldのオ</description>
    </item>
    
    <item>
      <title>Using HUGO</title>
      <link>https://fukasawah.github.io/posts/2018/12/24/using-hugo/</link>
      <pubDate>Mon, 24 Dec 2018 04:48:16 +0900</pubDate>
      
      <guid>https://fukasawah.github.io/posts/2018/12/24/using-hugo/</guid>
      <description>HUGO HUGO - https://gohugo.io/ 静的サイトジェネレータ。Markdownを書けばHTMLを作ってくれる。 また、記事の公開には、Github Pagesを使う。Netl</description>
    </item>
    
    <item>
      <title></title>
      <link>https://fukasawah.github.io/posts/1/01/01/_unposted_memo/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://fukasawah.github.io/posts/1/01/01/_unposted_memo/</guid>
      <description>インフラメモ
既存の問題 全般 IaCはとても良くて、メンテナンスされない手順書よりも良いし、手順ミスしない機械がやってくれる楽さは替えがたい。
再適用時は変更だけで済むか、作り直しになるかはちゃんと検証しなくてはならない。 完全モードは非常にリスキーで運用フローをしっかり固めたり、手動変更を一切禁じるなどしない限りはオススメできない。 増分モードは現状に増分適用している時と1から構築しようとした時と比べて、同じ状況になる保証がない。
Azure Resource Manager Template  利点  公式のツールで息が長い事が期待できる 状態を管理するファイルがいらない 最新の機能に追従している（多分） 公式がVS Code向けの拡張機能を出しているので最低限のシンタックスチェックや未使用変数の検知は行える  欠点  JSONで書かなければならない JSONの上にテンプレート構文を構築しているため、テンプレートを読み解くスキルを身に着ける必要があり、初学者に読み解かせるのは困難（後継者問題につながる。） key-valueで構築するためどうしても冗長な記述が多くなる 依存関係を把握して明示しなければならない   ARM Templateはタダで美味しく使えるわけではなくて、覚悟して使わないといけなく、不安の中で使っていかないといけない。
VM1個立てるのに250行以上書くことになる。 愚直に書いていたら5000行を超えるので、頑張って共通化して1000行程度に減らした経験はあるが、共通化を試行錯誤するのも時間がめちゃくちゃかかるのでそこに価値が見いだせるかは非常に怪しい。 （構築は1日で、共通化に2日とか。）
共通化の仕組みも乏しい。単品リソースのループぐらいは出来るが、Nested templateを使ったループはサポートされてないし、外部URLでテンプレートを参照する機能はあるが、ローカルファイルを参照する機能がない。
実行時のエラーは慣れてくると付近のリソースを見ればアタリは付けられる。が、些細なリソース名ミスでも仰々しいほどのエラーが出るので、これに慣れるしかない。</description>
    </item>
    
  </channel>
</rss>