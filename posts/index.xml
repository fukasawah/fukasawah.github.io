<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Posts on fukasawah.github.io</title><link>https://fukasawah.github.io/posts/</link><description>Recent content in Posts on fukasawah.github.io</description><generator>Hugo -- gohugo.io</generator><language>ja-JP</language><lastBuildDate>Mon, 19 Sep 2022 13:38:26 +0900</lastBuildDate><atom:link href="https://fukasawah.github.io/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>MCP資格のAZ-204に合格しました</title><link>https://fukasawah.github.io/posts/2022/09/19/exam-az-204/</link><pubDate>Mon, 19 Sep 2022 13:38:26 +0900</pubDate><guid>https://fukasawah.github.io/posts/2022/09/19/exam-az-204/</guid><description>Cloud Skill Challenge 2022 Mayのバウチャーをもらったので9月に受けてきました。AZ-305を請けるつもりでしたが、対象外だった。間が空いたのはちょっと理由が</description><content type="html"><![CDATA[<p>Cloud Skill Challenge 2022 Mayのバウチャーをもらったので9月に受けてきました。AZ-305を請けるつもりでしたが、対象外だった。間が空いたのはちょっと理由があり後述。</p>
<p>結果は821点で合格でした。セクションごとの成績を見てみましょう。</p>
<p>
    <figure>
    <a href="images/index/2022-09-17-17-01-18.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2022/09/19/exam-az-204/images/index/2022-09-17-17-01-18_hua4ed97517ec21bac2dbdd9ea14f791e2_10471055_300x300_fit_q75_bgffffff_box_2.jpg"  alt="受験結果のスコア。80%切ってるものが多い。"  loading="lazy"/>
    </a>
        <figcaption>受験結果のスコア。80%切ってるものが多い。</figcaption>
    </figure></p>
<p>特に「Azureサービスおよびサードパーティ製サービスの接続と使用」が悲惨です。ロクに実技をしてないことがよくわかりますね。</p>
<p>今回も部屋が汚いので試験センターで受けてきました。試験の流れとかは<a href="/posts/2021/12/05/exam-az-104/">前回</a>を参照。</p>
<h3 id="感想">感想</h3>
<ul>
<li>言語選択があった(C#, Python)
<ul>
<li>実装コードを選ばせられる。さすがにライブラリ固有な話はない・・・こともなかったが、実装経験がないとすぐには難しそうな話も</li>
</ul>
</li>
<li>学習ガイドに無い範囲もさわり程度に出てきた。Azure Static WebAppsあたり。</li>
<li>ニッチな設問も出る
<ul>
<li>Azure ADで認証するアプリで、アプリからアプリの権限でリソースにアクセスするのではなく、アプリから認証したユーザから権限を委譲してもらい、リソースにアクセスする系の話があった気がする。こういった複合技みたいな情報はすぐには出てこないし裏付けを取るのがしんどい。</li>
</ul>
</li>
<li>アカウントキー等のリソースのシークレット情報を使わず、マネージドIDを使ったAzure AD認証を推していっている
<ul>
<li>今のチュートリアルでやった気になっていると、ここでふるい落とされる</li>
</ul>
</li>
</ul>
<h3 id="やったこと">やったこと</h3>
<p>特に大したことはなく、実務でやっていたことが多かったので受かったという感じがする。</p>
<ul>
<li><a href="/posts/2021/12/05/exam-az-104/">前回</a>同様、Udemyの動画のコースを眺めたが、今回は眺めて良かったと思うことは少なかった（実務でやっていたことも多かったのと、特に注意したほうが良いポイントみたいな話もなかった）</li>
<li>Microsoft Learnで普段使っていないサービスを読んだ。特にAPI Management, Event Hubs, Storage Queue</li>
</ul>
<h3 id="やっておいたほうがいいこと">やっておいたほうがいいこと</h3>
<p>まず821点ごときの凡々な成績者の言う事なんで話半分に・・・（予防線）</p>
<p>AZ-104を抑えておくとセキュリティ・認証周りはすんなり理解できるはず。</p>
<p>勉強法は、教材を買ってひたすら解いてわからないところを復習、というありきたりな方法はまだ通用すると思います。しかし、今回の試験を受けた感じ、Azureはこういうのを認めていない気がしていて、実際に範囲外の内容も出てきたと思う。
（もちろん、Udemyなどで教材を売る方は合格に繋がらない教材は買ってもらえなくなるので、そのうちキャッチアップして対応していくだろう）</p>
<p>なので、それ以外にやっておいたほうが良いことはありそうだったので書いてみる。どちらかというと、Azureを使う上でやっておいた方が良いことのほうが近くて、これが試験の役に立つと思ってます。</p>
<ul>
<li>アップデート情報をキャッチアップする</li>
<li>サービスの制限を知る</li>
<li>時代の流れを抑えておく</li>
</ul>
<p>試験範囲ではないからやらない、のではなく、普段からアップデート情報をキャッチアップしていくのは必要だと思う。（当たり前かもしれないが）
特に以下のあたりはAZ-204では触れられていないはずだけど、キャッチアップはできていたので迷わず答えることができた（ただ正解していたどうかは別）</p>
<ul>
<li>Azure Static WebApps</li>
<li>Managed disk のZRSのサポート</li>
</ul>
<p>サービスの制限とかを抑えておくと細かい点数を拾えるのでよいでしょう。Azureはサービスの一貫性みたいなのがなく、プランで出来ることが違ったり、なぜできないのかわからない制限、実運用していくと辛くなる制限も多いです。サービスの数だけ覚えないといけないのはなんか違うのでは、という気はしている。</p>
<p>あとは時代の流れ(?)というものがあると思っていて、ゾーン冗長、Azure AD認証（マネージドIDなど）、プライベートエンドポイント接続あたりを推していると感じている。</p>
<p>ゾーン冗長はもちろん可用性のためであり、ゾーン冗長のサポート無しのサービスをゾーンレベルの可用性を取るように複数台構成を運用するのはシンドイ。</p>
<p>Azure AD認証はシークレットレスな運用を推し進めることでセキュアにしていく狙いがありそうで、リソース毎に払い出されるアカウントキーとかは今後使わないのが普通になるのではないかと思う。チュートリアルでは当たり前のように使っているが、正直アカウントキーをどう管理するかを踏まえて説明するか、警告してやる化したほうが良いと思っている。</p>
<p>プライベートエンドポイント接続は、通信をVNET内に閉じさせたいという <del>厳しい</del> お客様は未だに数多くいて、プライベートエンドポイント接続のサポート状況で採用できるサービスやプランが変わる事も多い。</p>
<h3 id="バウチャーがすぐもらえなかった">バウチャーがすぐもらえなかった</h3>
<p>割引を受けるには、受験をスケジュールするときにCloud Skill Challengeを受けた際のメールアドレスを入力すると、バウチャー（割引）を適用されるので、以降はスケジュールを組む、という流れ。</p>
<p>しかしなぜか Cloud Skill Challengeを受けた際のメールアドレスを入力しても、適用されなかった。反映が遅れてるとか思っていたが、6月でも解消しなかった。</p>
<p>しばらく忘れていたがやっぱり適用されなかったので、Cloud Skill Challengeに関する問い合わせを日本語でしたら、その日のうちに「メールアドレス、受けたCloud Skill ChallengeのURL、進捗が分かる画面のスクリーンキャプチャをくれ」と英語で返ってきた。多分、定型文なんだろう。</p>
<p>そのメールに返信して3日ぐらいで直接バウチャーのコードが送られてきた。期限は12月までだったような気がする。今回はそれで受けてきたという感じ。</p>
<h3 id="最近のazureとお仕事の感想">最近のAzureとお仕事の感想</h3>
<p>あまり愚痴を書ける機会がないし、自分のblog何だから好きに書く。</p>
<p>ちょこちょこAzureの構成案を見ることがあったが、いつもコストとサービスの組み合わせの難しさを思う。</p>
<p>インスタンスを立てる系のリソースは、PaaS,SaaSを選ぶとIaaSの2倍弱になるし、可用性を取りに行くと2倍はあっという間に超える。データ冗長性も2倍程度かかるが、データの規模が少ないならよっては許容できることが多い。このあたりのせいで最低構成と理想構成みたいな松竹梅でプランを分けて見積もりを取ってほしいという事を言われがちになっている。</p>
<p>これは別にAzureが暴利を取っているとかではなく、妥当かむしろ安いぐらいだと思っている。</p>
<p>どちらかというと、顧客が求めているレベルが上がりすぎている。</p>
<p>データを失うな、絶対にサービスを落とすな、サービスは速く安定して動くようにしろ、というのは気持ちはわかるし、なんなら当たり前になっていると思う。そしてコストを安くしろという。要求はもっともではあるが、どれもコストが掛かる。</p>
<p>「データを失うな」は個人的には最低限ではあると思っているのでバックアップぐらいは組み込むが、可用性に関してはかなり懐疑的。実際「もし10分止まったらどれぐらい機会損失を生みますか？金額にすると？」と聞くと具体的な金額が出てくることはほとんどない。あなたのサービスの価値はいくらですか？</p>
<p>また今年、1度だけAzure Functionのデプロイの仕組みを支えるサービスが死んだらしく3時間ほど東日本リージョンのAzure Functionが機能しないことがあった。サポートに問い合わせたらゾーン冗長をしていても防げなかった類ときいており、ゾーン冗長とは何かを考えさせられた。リージョン・ゾーン・ラックとかそういう物理単位は横に並べることはできるが、サービスは横に並べられず、もしやるならマルチクラウドをやるようなものとなり現実的ではないと思う。</p>
<p>その結果、通信がネックになっても処理はできるようにリージョン冗長し、TrafficManagerで1分以内に切り替えできるよう設定しつつ、DBのメインは東日本におきつつ、プライベートエンドポイントを通して西日本からアクセスできるようなホットスタンバイ構成を組んだりした。ただ、DB死んだらサービス止まる構成なので、さほど良い構成ではないと思う。そういうレベルで考えていくのは何か違う気がしている。本当求められているのか？</p>
<p>いつもいい答えが出ないままスケジュールに追われて「しゃーない、これでやるか」と妥協する日々。答えを教えておくれ。</p>
]]></content></item><item><title>PostgreSQLのALTER DEFAULT PRIVILEGESのtarget_roleには指定したロール自身の操作しか反映されない</title><link>https://fukasawah.github.io/posts/2022/04/20/postgresql-alter-default-privileges/</link><pubDate>Wed, 20 Apr 2022 03:50:57 +0900</pubDate><guid>https://fukasawah.github.io/posts/2022/04/20/postgresql-alter-default-privileges/</guid><description>タイトル通り。ハマったのでメモ。 要約 テーブル作成ができる contributorというロールがあり、contributorが付与されているad</description><content type="html"><![CDATA[<p>タイトル通り。ハマったのでメモ。</p>
<h2 id="要約">要約</h2>
<p>テーブル作成ができる <code>contributor</code>というロールがあり、<code>contributor</code>が付与されている<code>admin1</code>というユーザ(ログインできるロール)が居るとする。</p>
<p>読み取りのみできる<code>reader</code>というロールがあるとする。</p>
<p>そして、<code>admin1</code>でログインしてpublicスキーマへのテーブル作成で、デフォルトでreaderにSELECTの権限を与えたい場合、<code>SuperUser属性を持つユーザ</code>か<code>admin1</code>でログインして以下のSQLを実行する。</p>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql"><span class="k">ALTER</span> <span class="k">DEFAULT</span> <span class="k">PRIVILEGES</span> <span class="k">FOR</span> <span class="k">ROLE</span> <span class="n">admin1</span> <span class="k">IN</span> <span class="k">SCHEMA</span> <span class="k">public</span> <span class="k">GRANT</span> <span class="k">SELECT</span> <span class="k">ON</span> <span class="n">TABLES</span> <span class="k">TO</span> <span class="n">reader</span><span class="p">;</span>
</code></pre></div><p><code>FOR ROLE admin1</code>のように、実際にログインして作業できるロール(ユーザ)を指定するのが重要で、<code>FOR ROLE contributor</code>とするとダメ。
該当のロール(<code>contributor</code>)が付与されているユーザ(<code>admin1</code>)だからといって、このALTER DEFAULT PRIVILEGESは反映されない。そのため、<code>reader</code>権限が読み取れないテーブルになってしまう。</p>
<p>なお、<code>FOR ROLE</code>を指定するにはSuperUser属性を持つユーザか、スキーマ(上記の例だとpublic)にCREATEを持つユーザ(<code>admin1</code>)で実行する必要がある。</p>
<p>テーブルを作成できるユーザ==デフォルト権限を持つユーザ、であれば何の問題もないが、<code>テーブルを作成できるロールのメンバ</code>として管理している場合はこの動きに注意が必要かもしれない。
そうしないと「テーブルを作ったのに権限が付与されない。デフォルト権限はあるのに。なぜだ？」と混乱するだろう。</p>
<p>（DBの運用上、複数ユーザでテーブルを作ったりすることはほとんどないので、そういったロールをわざわざ作ってユーザに割り当てるようなことはしないか？）</p>
<h2 id="参考">参考</h2>
<p><a href="https://www.postgresql.jp/document/11/html/sql-alterdefaultprivileges.html">https://www.postgresql.jp/document/11/html/sql-alterdefaultprivileges.html</a></p>
<p><code>target_role</code>が今回ポイントの箇所だが、この件に触れられていない気がする。</p>
<h2 id="メモ">メモ</h2>
<p><code>FOR ROLE xxx</code>は省略でき、省略した場合は現在作業しているユーザとなる。</p>
<p><code>TO xxx</code>で指定できるロールは割り当て用のロール(<code>reader</code>)でも、そのロールが割り当てられているユーザでも機能する。</p>
<p><code>psql</code>では<code>\ddp</code>でデフォルト権限の付与状況を確認できる。<code>\dp</code>でテーブルの権限の状況を確認できる。</p>
<h2 id="検証コード">検証コード</h2>
<p>TODO: 出来れば書く。</p>
]]></content></item><item><title>ワークスペースベースの Application Insights の移行をARM Templateで試した</title><link>https://fukasawah.github.io/posts/2022/03/02/workspace-base-appinsights-with-arm-template/</link><pubDate>Wed, 02 Mar 2022 02:04:25 +0900</pubDate><guid>https://fukasawah.github.io/posts/2022/03/02/workspace-base-appinsights-with-arm-template/</guid><description>ワークスペースベースの Application Insightsの移行についてARM Templateで試した。 ちなみに、Azure Functionなどを画面でポチポ</description><content type="html"><![CDATA[<p>ワークスペースベースの Application Insightsの移行についてARM Templateで試した。</p>
<p>ちなみに、Azure Functionなどを画面でポチポチ作るときに作られるApplication Insightsはワークスペースベースになっていないです。</p>
<p>やるだけなので難しいことはないです。画面からやるのが一番簡単です。</p>
<p>ARM Template(bicep)でどう書けばいいか、と、画面で行った場合はデータも移行されるが、ARM Templateでは移行されるかを調べたので書いた次第。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://docs.microsoft.com/ja-jp/azure/azure-monitor/app/create-workspace-resource">ワークスペース ベースの Application Insights リソース - Microsoft docs</a></li>
<li><a href="https://blog.shibayan.jp/entry/20200928/1601229167">既存の Application Insights を Workspace ベースに移行した - しばやん雑記</a></li>
</ul>
<h2 id="きっかけ">きっかけ</h2>
<p>細かいことはドキュメントに書いてある通りで、ワークスペースを用意する必要がある以外のデメリットはあまりなさそうです。メリットもいくらかはあるようですが、大半はどうでもよかったです。</p>
<p>ただ、Application Insightsに反映されるまでに5分ぐらい時間がかかる問題があり、これがだいぶストレスでした。shibayan先生のblogを眺めていたところ、ここが改善されたというので試しました。</p>
<p>結果としては2分弱ぐらいで反映されるようになりだいぶ良くなりました。</p>
<h2 id="arm-templateで定義する場合">ARM Templateで定義する場合</h2>
<p>移行前後でApplication Insights周りのリソースの変化を調べた。</p>
<p><code>microsoft.insights/components</code>(Application Insightsリソース)のpropertiesの設定で</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">    <span class="s2">&#34;IngestionMode&#34;</span><span class="err">:</span> <span class="s2">&#34;ApplicationInsights&#34;</span>
</code></pre></div><p>これが以下のようになった。</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">    <span class="s2">&#34;WorkspaceResourceId&#34;</span><span class="err">:</span> <span class="s2">&#34;LogAnalytics WorkspaceのリソースID&#34;</span><span class="err">,</span> <span class="err">//</span> <span class="err">追加</span>
    <span class="s2">&#34;IngestionMode&#34;</span><span class="err">:</span> <span class="s2">&#34;LogAnalytics&#34;</span><span class="err">,</span> <span class="err">//</span> <span class="err">変更</span>
</code></pre></div><p>この内容を基にBicepで書き直して、既存のリソースに対して適用してみた。
（LogAnalytics Workspaceのリソースは別途、新規で作成。）</p>
<pre><code class="language-bicep" data-lang="bicep">param serviceName string = &quot;foo&quot;
param environmentName string = &quot;prd&quot;
param location string = resourceGroup().location

resource logAnalytics 'Microsoft.OperationalInsights/workspaces@2021-06-01' = {
  name: 'lg-${serviceName}-${environmentName}'
  location: location
  properties: {
    sku: {
      name: 'PerGB2018'
    }
    retentionInDays: 90
    features: {
      enableLogAccessUsingOnlyResourcePermissions: true
    }
    workspaceCapping: {
      dailyQuotaGb: 1
    }
    publicNetworkAccessForIngestion: 'Enabled'
    publicNetworkAccessForQuery: 'Enabled'
  }
}

resource appinsights 'Microsoft.Insights/components@2020-02-02' = {
  name: 'appinsight-${serviceName}-${environmentName}'
  location: location
  kind: 'web'
  properties: {
    WorkspaceResourceId: logAnalytics.id // 追加
    IngestionMode: 'LogAnalytics'        // 変更
    Application_Type: 'web'
    Flow_Type: 'Bluefield'
    Request_Source: 'rest'
  }
}
</code></pre><p>既存のデータも用意したLogAnalyticsへと移行されました。（ただ２～３日程度のログなので長期間の場合はよくわからない）</p>
]]></content></item><item><title>Azure AD B2Cを作ってサンプルアプリを動かした</title><link>https://fukasawah.github.io/posts/2021/12/11/azure-ad-b2c/</link><pubDate>Sat, 11 Dec 2021 11:09:06 +0900</pubDate><guid>https://fukasawah.github.io/posts/2021/12/11/azure-ad-b2c/</guid><description>Azure AD B2CでめんどくさいID管理を丸投げできないかなと思い調べた 参考資料 ドキュメント https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/ 読んでおくと良さそうな記事 https://jpazureid.github.io/blog/azure-active-directory/azure-ad-b2c-fundamentals/ https://qiita.com/Shinya-Yamaguchi/items/03321728b373a27be009 作成準備 DNSゾーン作成</description><content type="html"><![CDATA[<p>Azure AD B2CでめんどくさいID管理を丸投げできないかなと思い調べた</p>
<h2 id="参考資料">参考資料</h2>
<p>ドキュメント</p>
<ul>
<li><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/</a></li>
</ul>
<p>読んでおくと良さそうな記事</p>
<ul>
<li><a href="https://jpazureid.github.io/blog/azure-active-directory/azure-ad-b2c-fundamentals/">https://jpazureid.github.io/blog/azure-active-directory/azure-ad-b2c-fundamentals/</a></li>
<li><a href="https://qiita.com/Shinya-Yamaguchi/items/03321728b373a27be009">https://qiita.com/Shinya-Yamaguchi/items/03321728b373a27be009</a></li>
</ul>
<h2 id="作成準備">作成準備</h2>
<h3 id="dnsゾーン作成任意">DNSゾーン作成（任意）</h3>
<p>Azure DNSゾーンでやる必要はなく、任意のドメインレジストラで大抵対応できる。今回はなんとなくAzure DNSゾーンを作り委任する。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-05-35-16.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-05-35-16_huc6c01608a6365c5bdd698563898edbc4_51904_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>DNSゾーンに割り振られたネームサーバを確認</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-05-38-23.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-05-38-23_hu434abc0467a88b8845698e3d6daf2b60_41516_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>Googleドメインを使っていたので、Azure DNSゾーンのネームサーバを設定し、そちらを見てもらうようにする。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-05-41-18.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-05-41-18_huc4488f5675e11aa958f35daec7109a61_71119_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<h3 id="サブスクリプションにリソースプロバイダを登録する">サブスクリプションにリソースプロバイダを登録する</h3>
<p>よくわかってないが予めやっておく必要がある。</p>
<p>サブスクリプション→リソースプロバイダから<code>Microsoft.AzureActiveDirectory</code>がRegisteredになっていることを確認する。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-03-32.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-03-32_hu64b40eb1857e06f5107c356d0429552a_46893_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>NotRegisteredな状態だと作れないので、その時は選択し登録する。</p>
<h2 id="azure-ad-b2cテナントを作成">Azure AD B2Cテナントを作成</h2>
<p>Azure AD B2C自体は「サービス」であり、実体は「テナント」と呼ぶ。（オブジェクト指向言語のクラスとインスタンスみたいな感じ。）</p>
<h3 id="azure-ad-b2cのテナントを作る">Azure AD B2Cのテナントを作る</h3>
<p>チュートリアルに従って進めた。</p>
<p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/tutorial-create-tenant">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/tutorial-create-tenant</a></p>
<p>
    <figure>
    <a href="images/index/2021-12-11-05-58-28.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-05-58-28_hu1794b7c3e99e520a4c44490d7d942df7_22285_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>
    <figure>
    <a href="images/index/2021-12-11-05-59-10.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-05-59-10_huf1d3d6ef5c3d3c6fc353082b6228eb0c_25601_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-00-08.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-00-08_hu1c59ef04f73d46a7c755dd1550825797_39568_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<h3 id="カスタムドメイン追加">カスタムドメイン追加</h3>
<p>アプリを動かすだけなら無くてもいいのだが、せっかくなのでAzure AD B2Cをカスタムドメインで運用したい。</p>
<p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/custom-domain">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/custom-domain</a></p>
<p><code>Azure Active Directory</code> を開く。B2Cのほうではない。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-16-32.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-16-32_hu92218a54fe7f5faee57edefbdf6b6aa3_8785_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>B2Cのものが表示されるはずなので確認する。そうでない場合は、ディレクトリの切り替えを行う。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-17-19.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-17-19_hu96440c0b79b1fda42ab846477321a331_26078_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>カスタムドメインを追加する。
apexドメイン(fukasawah.dev)でも良いが、今回はアプリケーションをいくつも持つ想定でサブドメイン <code>example.fukasawah.dev</code> としてみる。(テナント名も変えればよかった)</p>
<p>追加すると、ドメインの持ち主か確認のためレコードを登録する作業が必要。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-21-33.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-21-33_hu66d3353ca4f7ca8dc6d376ab793c1b62_34897_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>先ほど作ったDNSゾーンにレコードを登録する。apexドメインの場合は<code>@</code>でよいが、今回はサブドメイン<code>example.fukasawah.dev</code>を使っているので、<code>example</code>とする。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-24-03.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-24-03_hudb69a6c243af35da97b9a2ed97c27c0e_13672_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>DNSゾーン登録後、確認し、DNSがうまく反映されていれば以下のような画面になる。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-25-34.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-25-34_hu6eba2802c3f6ff1a55296fba0562fa13_28582_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>検証後はDNSゾーンのレコードを削除する（もう使わないので）</p>
<p>カスタムドメインを再度開き、プライマリに変更するのを忘れずに。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-06-41-03.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-06-41-03_hu0377bb02e4c2bbc55a96433e1b899ec9_28297_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<h2 id="azure-ad-b2cで認証させるサンプルアプリを動かす">Azure AD B2Cで認証させるサンプルアプリを動かす</h2>
<p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/configure-authentication-sample-web-app?tabs=visual-studio-code">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/configure-authentication-sample-web-app?tabs=visual-studio-code</a></p>
<p>ここにサンプルコードがあるので、予めcloneしておく。
それを自分が作ったAzure AD B2Cに連携させてみる。</p>
<h3 id="ユーザフローを作成する">ユーザフローを作成する</h3>
<p>ユーザフローは要所（サインイン・サインアップ・パスワードリセット・プロフィール編集）において、認証の仕方や、どの情報を登録できるか、どの情報を返すかをコントロールできる。（こんなに分けて作る意味あるのか？という気もするが）</p>
<p><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/add-sign-up-and-sign-in-policy">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/add-sign-up-and-sign-in-policy</a></p>
<p>
    <figure>
    <a href="images/index/2021-12-11-07-27-33.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-07-27-33_hud9b9021810cced6a0ca00f83ab567002_34904_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>ユーザーフロータイプを選択する。今回はユーザが自分からサインアップ（登録）もできるようにしたいので「サインアップとサインイン」を選ぶ。
サインインのみなら「サインイン」を選ぶ。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-09-50-56.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-09-50-56_hu33ba4832b3c352af6a4c8f8e13db26d8_94412_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>フロー名をつけ適当に項目を埋める。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-07-31-24.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-07-31-24_hu7176163d15edcf7ea92b838025e72673_87887_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>「 ユーザー属性とトークン要求」は、「属性を収集する」がサインアップ時に入力させる項目「要求を返す」がサインイン後にトークンに含めるclaimの情報になる。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-07-31-46.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-07-31-46_hudfa448cf5b6f2751aefddb638402b877_122767_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>後は必要に応じて作ればよいが、最低限サインインとパスワードリセットの2つは作っておいた方がよさそう。</p>
<h3 id="アプリの登録を行う">アプリの登録を行う</h3>
<p>テナントを開き、アプリの登録を行う。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-07-12-41.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-07-12-41_hud0bb8b43b003807aa6e67db94152fc7e_69533_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>「任意の ID プロバイダーまたは組織ディレクトリ内のアカウント (ユーザー フローを使用したユーザーの認証用)」にすること。
このテナントしか使わないからと「この組織ディレクトリのみに含まれるアカウント」を選ぶと、通らなくなるので注意。</p>
<p>リダイレクトURIは動作確認用アプリに合わせた値を指定する。（サンプルアプリの都合から<code>https://localhost:44316/signin-oidc</code>とした）</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-08-09.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-08-09_hu29c6b7e7e690e01905e23b59aa101980_83258_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>認証でIDトークンにチェックする。アクセストークンは渡す必要ないはず。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-10-56-56.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-10-56-56_hubbfd6b0dbc45016b4546cf97acabdf2f_95985_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>クライアントIDは設定に使うのでコピーしておく</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-07-18-37.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-07-18-37_hucb426511956255a2028070426b3d541d_27852_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<h3 id="サンプルアプリの設定に反映">サンプルアプリの設定に反映</h3>
<p>appsettings.jsonの内容を書き換える。</p>
<div class="highlight"><pre class="chroma"><code class="language-json" data-lang="json">    <span class="s2">&#34;AzureAdB2C&#34;</span><span class="err">:</span> <span class="p">{</span>
        <span class="nt">&#34;Instance&#34;</span><span class="p">:</span> <span class="s2">&#34;https://fukasawahdev.b2clogin.com&#34;</span><span class="p">,</span> <span class="err">//</span> <span class="err">`初期ドメイン名.b2clogin.com`</span>
        <span class="nt">&#34;ClientId&#34;</span><span class="p">:</span> <span class="s2">&#34;*********************&#34;</span><span class="p">,</span> <span class="err">//</span> <span class="err">アプリの登録で登録したクライアントID(アプリケーションID)</span>
        <span class="nt">&#34;Domain&#34;</span><span class="p">:</span> <span class="s2">&#34;example.fukasawah.dev&#34;</span><span class="p">,</span> <span class="err">//</span> <span class="err">Azure</span> <span class="err">AD</span> <span class="err">B2C</span> <span class="err">テナントのドメイン名</span>
        <span class="nt">&#34;SignedOutCallbackPath&#34;</span><span class="p">:</span> <span class="s2">&#34;/signout/B2C_1_example&#34;</span><span class="p">,</span> <span class="err">//</span> <span class="err">/signout/サインインのユーザーフロー名</span>
        <span class="nt">&#34;SignUpSignInPolicyId&#34;</span><span class="p">:</span> <span class="s2">&#34;B2C_1_example&#34;</span> <span class="err">//</span> <span class="err">/signoutサインインの/ユーザーフロー名</span>
        <span class="err">//</span><span class="s2">&#34;ResetPasswordPolicyId&#34;</span><span class="p">:</span> <span class="s2">&#34;b2c_1_reset_password&#34;</span> <span class="err">//</span> <span class="err">パスワードリセットのユーザーフロー名</span>
        <span class="err">//</span><span class="s2">&#34;EditProfilePolicyId&#34;</span><span class="p">:</span> <span class="s2">&#34;b2c_1_edit_profile&#34;</span> <span class="err">//</span> <span class="err">プロフィール編集のユーザーフロー名</span>
        <span class="err">//</span><span class="s2">&#34;CallbackPath&#34;</span><span class="p">:</span> <span class="s2">&#34;/signin/B2C_1_sign_up_in&#34;</span>  <span class="err">//</span> <span class="err">defaults</span> <span class="err">to</span> <span class="err">/signin-oidc</span>
    <span class="p">}</span><span class="err">,</span>
</code></pre></div><p>Instanceの値は、Azure AD B2Cを作成した時の「初期ドメイン名」に使った内容がベースになる模様。
<code>初期ドメイン名.onmicrosoft.com</code>だった場合、<code>初期ドメイン名.b2clogin.com</code>になる。</p>
<h3 id="サンプルアプリを動かす">サンプルアプリを動かす</h3>
<pre><code>dotnet run
</code></pre><p>プロジェクト内の設定ファイルのおかげで起動後にブラウザが開くはず。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-23-03.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-23-03_hu710d682e45145d6edda678746d174506_32544_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>ログイン画面はURLが<code>fukasawahdev.b2clogin.com</code> という形になる。
独自ドメインで見せたい場合は、Azure FrontDoorを入れる必要がある模様。証明書の兼ね合いもあるのでなんらかのリバースプロキシを置くしかない・・・</p>
<p><a href="https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-domain?pivots=b2c-user-flow">https://docs.microsoft.com/en-us/azure/active-directory-b2c/custom-domain?pivots=b2c-user-flow</a></p>
<p>「sign up now」からユーザ登録ができる。もしユーザ登録させたくない場合は「ユーザフローポリシー」を「サインイン」で作り、それをアプリの設定に使う。</p>
<p>メール認証する必要があり、メール認証を終えると登録できる。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-26-13.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-26-13_hu3d13fc537442ca62083348e51ad63b42_23680_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>登録後、リダイレクトして戻ってくる。ユーザ情報を取れていることが分かる。</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-27-47.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-27-47_hub699f23933ae542f452ff5cb65d6102a_59308_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>サンプルアプリではClaimの内容も確認できる（cookieは暗号化されているっぽい？）</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-40-13.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-40-13_huc8f66ec1d55cb256c8e38bcc557f8037_20628_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<p>ユーザー登録したので、AD上にもユーザが増えている</p>
<p>
    <figure>
    <a href="images/index/2021-12-11-09-05-31.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-09-05-31_hu0686de646b4c142b0adda5ce5b9489af_53522_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<h3 id="トラブルシューティング">トラブルシューティング</h3>
<p>
    <figure>
    <a href="images/index/2021-12-11-08-07-13.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/11/azure-ad-b2c/images/index/2021-12-11-08-07-13_hu2eed65195904738715da9578aa251af4_16364_300x300_fit_q75_bgffffff_box_2.jpg"   loading="lazy"/>
    </a>
    </figure></p>
<pre><code>AADB2C90068: The provided application with ID 'クライアントID' is not valid against this service. Please use an application created via the B2C portal and try again.
</code></pre><p>次を見て解決。</p>
<p><a href="https://docs.microsoft.com/en-us/answers/questions/360401/aadb2c90068-the-provided-application-with-id-is-no.html">https://docs.microsoft.com/en-us/answers/questions/360401/aadb2c90068-the-provided-application-with-id-is-no.html</a></p>
<p>「アプリを登録」するときに「<strong>任意の ID プロバイダーまたは組織ディレクトリ内のアカウント</strong>」を選ぶ必要があった。
外部のIDプロバイダ使わないし「この組織ディレクトリのみに含まれるアカウント」でよいのでは？と思って選ぶとこれにハマる。</p>
<h2 id="終わり">終わり</h2>
<p>これだけなのに4時間ぐらいかかった。</p>
<p>しかもやっただけで、細かいところはよくわかってない。やることはまだまだありそうだが一旦ここまで。</p>
<ul>
<li>ユーザ登録を柔軟に制御したい場合（管理画面などから登録させるとか、招待メールを送るとか、一括登録とか）</li>
<li>アプリ上のデータの紐づけ方（クレームに含まれるユーザのObjectIDでやっていいのかどうかとか）</li>
<li>ブランディングの強化
<ul>
<li>ログイン画面の見た目変更（分かる人はMicrosoftのやつじゃんってすぐわかっちゃう）
<ul>
<li>単純なレベルならブランドの設定で出来そう</li>
<li>より細かくもできるかもしれない？
<ul>
<li><a href="https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/customize-ui-with-html?pivots=b2c-user-flow">https://docs.microsoft.com/ja-jp/azure/active-directory-b2c/customize-ui-with-html?pivots=b2c-user-flow</a></li>
</ul>
</li>
</ul>
</li>
<li>日本語化（ブラウザの言語設定をみているかもしれない。が、私の環境は日本語のはずだが英語で出る）</li>
<li>Azure Frontdoorを使って、カスタムドメインでログイン画面を見せたい。<code>.b2clogin.com</code>というあまり関係ないURLに遷移するとか今どきは怖いはず。</li>
</ul>
</li>
</ul>
]]></content></item><item><title>MCP資格のAZ-104に合格しました</title><link>https://fukasawah.github.io/posts/2021/12/05/exam-az-104/</link><pubDate>Sun, 05 Dec 2021 12:58:52 +0900</pubDate><guid>https://fukasawah.github.io/posts/2021/12/05/exam-az-104/</guid><description>2年以上前にAZ-103を受けて不合格だったが、今回は受かった。1000点中700点で合格で814点。Azureが使えると言っていいのかは微</description><content type="html"><![CDATA[<p><a href="/posts/2019/05/25/fail-an-examination-az-103">2年以上前にAZ-103を受けて不合格だった</a>が、今回は受かった。1000点中700点で合格で814点。Azureが使えると言っていいのかは微妙ですが、合格は合格です。</p>
<p>
    <figure>
    <a href="images/index/scorereport.jpg" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/12/05/exam-az-104/images/index/scorereport_hubf6120104839cbe23c123095e382bff3_277408_300x300_fit_q75_box.jpg"  alt="scorereport"  loading="lazy"/>
    </a>
        <figcaption>scorereport</figcaption>
    </figure></p>
<p>特に仕事でVM ScaleSetやLoadBalancerを使ったり、FunctionsやAppServiceを書いたり、RBACを意識してマネージドIDを活用したり、ARM Templateに苦しんでBicepに乗り換えたけど根本的な所は解決してないと気付いて辛くなったり、Azureのポータルとにらめっこしたり、と色々やってたので、その辺りで力がついたと思う。逆を言えば2年も仕事でやって自信がついていた領域で満点とれてないのが悲しい。</p>
<h3 id="試験の受け方">試験の受け方</h3>
<p>今回も外の試験会場に予約を取って行った。会場は違っても流れは前回と同じ。</p>
<h3 id="試験">試験</h3>
<p>全て選択問題。100分で55問？ぐらいだった。前回は180分だったので、だいぶ短くなっている。</p>
<p>問題形式は以下で例がある。</p>
<p><a href="https://docs.microsoft.com/ja-jp/learn/certifications/exam-duration-question-types">https://docs.microsoft.com/ja-jp/learn/certifications/exam-duration-question-types</a></p>
<p>AZ-103の時はケーススタディに入る前に見直しが入って見直し後は二度と見直しができなかった気がするが、AZ-104ではそういうのは無かった。</p>
<p>しかし、時間が短くなったことで1問に2分しか費やせない。問題によっては1分あれば十分なものもあれば5分あっても厳しいものがあった。結局、時間切れと同時に最後の回答をしたぐらいギリギリだった。</p>
<p>回答選択できる項目を先にみてから、何を答えようとしているかを先に頭に入れてから問題を読むほうが良いかもしれない。ケーススタディは特に。答える時も2分以上悩むようであれば、その時に考えてる答えを選んで見直し対象にして後で確認でも良いだろう。</p>
<p>あと、言葉足らずな問題が2問ぐらいあった気がする。「それ、どういう状態での話なの？Aなら1,Bなら2なんだが」という感じで回答に困るのがあった。問題文を見落としているだけなのかもしれないが。
そういう時はその時の直感で答えておき、見直し対象に含めて後で改めて考えるのがよかったと思う。</p>
<h3 id="問題">問題</h3>
<p>具体的な問題については書けない。</p>
<p>相変わらず問題文のクセが強い。「（事前条件）があり（目的）をしたい。何をすればよいか？」といった感じ。これはAZ-103のころから変わってなかった。恐らくは1度受けないと慣れない形式だと思う。</p>
<p>ストレージアカウントの認証にアクセスキーやSASだけではなく、Azure AD連携(サービスプリンシパルとRBAC)を使うとか出来ることが増えているのだが、この辺りについてはまだ含まれていなさそうだった。
ただ、シークレットレスな構築ができるように進化が進んでいる感じはしているので、この辺りの移り変わりも起きると思う。結局第三者に使ってもらう時は何かしらシークレット情報を共有しないといけないのだけど。（サービスプリンシパルを公開鍵でやるとか色々やり方はあるけども、そもそもサービスプリンシパルって第三者のアプリのために払い出すのってどうなんだろう。）</p>
<h3 id="勉強方法">勉強方法</h3>
<p>ざっくり分けると以下。</p>
<ul>
<li>仕事</li>
<li>Azure Learn</li>
<li>Udemyの動画(1200円)</li>
</ul>
<p>仕事で範囲内のことを色々やっていたのが一番大きいが、前回と比べてAzure Learnが増えているのもポイント。</p>
<p><a href="https://docs.microsoft.com/ja-jp/learn/certifications/exams/az-104">https://docs.microsoft.com/ja-jp/learn/certifications/exams/az-104</a></p>
<p>試験概要のページ（いつの間にかdocsに移ってた）で、Azure Learnが紹介されており、何を抑えればいいかをざっくり辿れるものが出てきて、勉強面では充実してきている。一通り眺めて、タイトルに分からない単語があったらそれを拾って読んだりしていた。
前回はAzure AD周りやNetwork Watcherあたり(接続モニター、IPフロー検証、NSGフローログ、パケットキャプチャ)が全く分かってなかったので、そこを少し厚く眺めてた気がする。今もよくわかってない。</p>
<p>しかし、試験の内容を考えるとこれだけで抑えるのはかなり無理があると思う。Learnは製品の説明や出来ることを説明していく形であり、製品の制約などを抑える必要もある。大事なところは割とLearnの内容でも書いてあるのだが、引用されたドキュメントも含めて理解する必要もあったり、謎が謎を呼びどこまで読めば理解したと言えるのか？と辛くなった。また、Learnの途中にある理解度チェックの内容は実際の問題に少し近いが、試験範囲を全くカバーできていないので、Learnだけで試験に通用するぐらい理解できるとは思えない。私の要領が悪いだけかもしれない。</p>
<p>で、不安だったので、Udemyでシラバスの内容を操作付き動画で説明するコースが購入した。今回は英語だったが<a href="https://www.udemy.com/course/70533-azure/">AZ-104 Microsoft Azure Administrator Exam Certification 2021</a>を買った。セールで1200円。他の試験領域と被るので流用はあったものの、かなりボリュームがある。実際はトランスクリプト(文字起こし・英語）をGoogle翻訳で訳しながら2倍速で流し読みした。トランスクリプトの認識が間違ってたり、文をまたいで変な翻訳になるものの概ね理解できる内容で読めていた。</p>
<p>手を動かして学ぶのがやり方の一つではあるけども、分からない状態でドキュメントに従い手を動かすというのは、私は結構面倒に感じている。また<strong>Azureはお試しでも課金が発生する</strong>ので、その不安の中で作業する必要があり、ストレスフルであり、やる気を失いがちだと思う。Learnのサンドボックス環境もあるし、課金プランを理解できていれば変な課金は発生しないし、予算設定しなさいとか、12ヵ月の無償期間をうまくつかうとか、終わったらきちんと削除しましょうとか色々あるけど。</p>
<p>その点、解説動画は<strong>分かっている人が手を動かしてやって見せてくれる</strong>のが良くて、その不安を軽減できる。どこに何があるかをもたもた探さなくてよい。作成には時間がかかるものもあるが動画ならカットしてくれる。「そうやればいいのね」と学びもある。そういうコースが1200円で見れるのでアリだと思う。ドットインストールとかで何か学んでたりした人は良いかもしれない。</p>
<p>なお、1年前にUdemyで模擬試験のコースがセールで安かったので買ったものの、見ないまま放置していたらコースが削除されて見れなくなるという事があって、自分の中ではUdemyの株は下がっている。次に使うかはわからない。</p>
<p>他の勉強方法としては、公認のトレーニングがあったり、トレーニングを受けた人向けのWebセミナーをやっているが、トレーニングは時間拘束されるのとお高いので使っていない。</p>
<h3 id="おわり">おわり</h3>
<p>リベンジが果たせてよかった。でも仕事に生かせるかどうかは自信がない。今まで通りやっていくだけだろうなぁ。</p>
]]></content></item><item><title>Gitのクライアントフックを使いHugoの記事の作成日時を忘れずに置き換える</title><link>https://fukasawah.github.io/posts/2021/12/05/use-git-hooks-to-replace-creation-date/</link><pubDate>Sun, 05 Dec 2021 12:16:24 +0900</pubDate><guid>https://fukasawah.github.io/posts/2021/12/05/use-git-hooks-to-replace-creation-date/</guid><description>要約 Hugoの記事データに埋め込む作成日時をコミット時の日時にしたく、Gitのフック(pre-commit)とGitattributesのフ</description><content type="html"><![CDATA[<h2 id="要約">要約</h2>
<p>Hugoの記事データに埋め込む作成日時をコミット時の日時にしたく、Gitのフック(pre-commit)とGitattributesのフィルタを試して、フックを採用した。</p>
<p>セットアップを楽にしたくcloneしたらすぐ機能する状態にしたかったが、完全に手順を無くすことはできなさそう。というのも、そうしないと、cloneした後add/commitで任意コマンド実行といった脆弱性に繋がる。なので明示的に指定させるやり方を取っているんだと思う。そのため、必ずconfigに1行書き足すコマンドを実行する必要があるが、それは許容する事にした。README.mdとかに書いておけばよいでしょう。</p>
<h2 id="参考">参考</h2>
<ul>
<li><a href="https://git-scm.com/docs/githooks">https://git-scm.com/docs/githooks</a></li>
<li><a href="https://git-scm.com/docs/git-config#FILES">https://git-scm.com/docs/git-config#FILES</a></li>
<li><a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%83%95%E3%83%83%E3%82%AF">https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%83%95%E3%83%83%E3%82%AF</a></li>
<li><a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7#r_keyword_expansion">https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7#r_keyword_expansion</a></li>
</ul>
<h2 id="背景">背景</h2>
<p>ここの記事を書く時に作成日時を毎回コミット前に時計を見ながらだいたいの日時に合わせていた。
ある日、ふとプログラマらしからぬ行動だなと思い、これを自動化する方法を考えた。</p>
<p>まず、ここの記事はhugoを使ってHTMLへ変換している。そしてHugoの機能で最終更新日時をGitのコミットログから取り出す機能があるので作成日時も取れるのではないかと考えたが、そのような機能は提供していなかった。一応、hugoの機能で<a href="https://gohugo.io/content-management/archetypes/">テンプレートから記事を作成する機能</a>があり、その際に現在日時を埋め込むテンプレートを書くことができるが、記事を書き終えた日時ではないので若干ずれるし、書き始めたのはいいものの書ききれず翌日に持ち越しになることもある（そのまま日の目を見ないまま朽ちる方が多い）</p>
<p>なので、どうにかしてコミット時の日時になるように置き換えたい。具体的には・・・</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">---<span class="w">
</span><span class="w"> </span><span class="k">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;タイトル&#34;</span><span class="w">
</span><span class="w"> </span><span class="k">date</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;&#34;</span><span class="w"> </span><span class="c"># （先頭にスペースが入ってるが実際はスペースは含まれない。フックのせいで書き換わってしまうのでスペースを入れて誤魔化している）</span><span class="w">
</span></code></pre></div><p>こんなかんじで書き、コミットするときにdateの箇所がコミット時の日時になるように置き換えたい。</p>
<div class="highlight"><pre class="chroma"><code class="language-yaml" data-lang="yaml">---<span class="w">
</span><span class="w"> </span><span class="k">title</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;タイトル&#34;</span><span class="w">
</span><span class="w"> </span><span class="k">date</span><span class="p">:</span><span class="w"> </span><span class="s2">&#34;2021-11-11T02:44:50+09:00&#34;</span><span class="w">
</span></code></pre></div><p>もっと単純にすると「該当ファイルの特定キーワードを見つけたらコミット時の日時に置き換えたい」</p>
<p>なお<code>date: .*</code>にマッチする行を見つけたら<code>date: &quot;2021-01-23T01:23:45Z&quot;</code>に置き換えるように書いてもよいが、<code>date: .*</code>だと次回もコミットするたびに上書きされてしまう。更新日時であればそれでも良いが、今回は作成日時なので作成した時の1回だけ置き換えるように<code>date: &quot;&quot;</code>を置き換える形とする。これなら2回目はマッチせず置き換わらない。</p>
<h2 id="調査">調査</h2>
<h3 id="hookを使うクライアントサイドフック">Hookを使う（クライアントサイドフック）</h3>
<p><a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%83%95%E3%83%83%E3%82%AF">https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%83%95%E3%83%83%E3%82%AF</a></p>
<p><code>.git/hooks/pre-commit</code> を定義しておくと、commitを作成する前にこのスクリプトを実行してくれる。
しかし、<code>.git</code>配下はバージョン管理できないためここに置く運用は少しコストがある。
なので、適当に<code>.git_hooks</code>などのディレクトリを作り、git config で <code>core.hooksPath .git_hooks</code> と設定するのがよさそう。（シンボリックリンクでもいいかもしれないがWindowsではジャンクションとかになるので手順が変わってしまう）</p>
<p>これを利用してコミットしたファイルの内容に含まれる作成日時を書き換えたい。</p>
<p>手順。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># フックスクリプトを作成。バージョン管理対象。</span>
<span class="c1"># .gitがあるディレクトリ(GIT_DIR)からの相対パスで作成する。core.hooksPathで指定できるパスであればなんでも良い</span>
<span class="c1"># GIT_DIR</span>
<span class="c1"># - .git</span>
<span class="c1"># - .git_hooks</span>
<span class="c1">#    - pre-commit</span>
mkdir .git_hooks
cat <span class="s">&lt;&lt; &#39;EOF&#39; &gt; &#34;.git_hooks/pre-commit&#34;
</span><span class="s">#!/bin/bash
</span><span class="s">
</span><span class="s">TIMESTAMP=$(date --iso-8601=s)
</span><span class="s">
</span><span class="s">git diff --cached --name-only | grep &#39;^content/.*\.md$&#39; | while read filepath; do
</span><span class="s">  if [ -f &#34;$filepath&#34; ] &amp;&amp; sed -i &#34;s/^date: \&#34;\&#34;/date: \&#34;$TIMESTAMP\&#34;/g&#34; &#34;$filepath&#34;; then
</span><span class="s">    echo &#34;(filter) rewrited $filepath&#34;
</span><span class="s">    git add &#34;$filepath&#34;
</span><span class="s">  fi
</span><span class="s">done
</span><span class="s">EOF</span>

<span class="c1"># Linuxでは実行権限を与える必要がある</span>
chmod +x <span class="s2">&#34;.git_hooks/pre-commit&#34;</span>

</code></pre></div><p>次にデフォルトのフックではなく、作成したフックがあるディレクトリを参照するようにする。このリポジトリにだけ効けばよいので<code>--local</code>をつける。この作業はclone後などにリポジトリ毎に最初に1回だけ行う。</p>
<div class="highlight"><pre class="chroma"><code class="language-sh" data-lang="sh"><span class="c1"># フックスクリプトのホームを指定。.gitがあるディレクトリ(GIT_DIR)からの相対パス</span>
<span class="c1"># これはclone直後などに1回だけセットアップする</span>
git config --local core.hooksPath <span class="s2">&#34;.git_hooks&#34;</span>
</code></pre></div><p>今回は、ステージした<code>.md</code>に含まれる一部の文字列を書き換えたいので、コミット対象ファイルパスを取得し、<code>^content/.*\.md$</code>にマッチするものでフィルタし、sedで書き換え、該当ファイルを編集後に再度 <code>git add</code> する。</p>
<p>ただし、このやり方は<code>git add -p</code>で部分的な編集を無視してしまうことになるので注意。</p>
<p>動作確認。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># テストファイル作成</span>
<span class="nb">echo</span> <span class="s1">&#39;date: &#34;&#34;&#39;</span> &gt; content/posts/test.md
<span class="c1"># ステージに反映し、コミット対象に含める</span>
git add content/posts/test.md

<span class="c1"># ワーキングディレクトリの内容が置き換わっていないことを確認</span>
cat <span class="s2">&#34;content/posts/test.md&#34;</span>
<span class="c1"># コミット</span>
git commit -m <span class="s2">&#34;お試し&#34;</span>

<span class="c1"># ワーキングディレクトリの内容が置き換わったことを確認</span>
cat <span class="s2">&#34;content/posts/test.md&#34;</span>
<span class="c1"># コミットに反映されたのをログの差分から確認</span>
git log -p HEAD

<span class="c1"># 確認が終わったので、コミットを取り消して、addやコミット前の状態に戻す</span>
git reset HEAD^
</code></pre></div><p>管理面では、commit作業する前に<code>core.hooksPath</code>を忘れずに設定しておく必要がある。</p>
<h3 id="gitattributesとフィルタを使う">gitattributesとフィルタを使う</h3>
<p><a href="https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7#r_keyword_expansion">https://git-scm.com/book/ja/v2/Git-%E3%81%AE%E3%82%AB%E3%82%B9%E3%82%BF%E3%83%9E%E3%82%A4%E3%82%BA-Git-%E3%81%AE%E5%B1%9E%E6%80%A7#r_keyword_expansion</a></p>
<p>上記のリファレンスでは「キーワード展開」と目次があるがそのような機能ではなく、ファイルの内容を書き換えるフィルタを「キーワード展開」として使っている。
なお、キーワード展開はSubversionにあった「<a href="https://svnbook.red-bean.com/en/1.7/svn.advanced.props.special.keywords.html">キーワード置換</a>」のようなもので、<code>$Author$</code>とあったら<code>$Author: fukasawah$</code>と置き換える。リファレンスではこれをこのフィルタの機能で行えることを示す内容にもなっている。</p>
<p>ステージングエリアとワーキングディレクトリを行き来するときのフィルタを書くことができる。</p>
<ul>
<li>git checkout (ステージングエリア→ワーキングディレクトリ、チェックアウトの直前)の時は<code>sumdge</code>フィルタを実行</li>
<li>git add (ワーキングディレクトリ→ステージングエリア、ステージングの直前)の時は<code>clean</code>フィルタを実行</li>
</ul>
<p>フィルタは、コマンド実行する形で、標準入力でデータを読み標準出力で書き出す、という形を守れば何でもよいらしい。</p>
<p>これが使えないか検討したが、今回は見送った。後述。</p>
<p>手順。</p>
<p>フィルタをgitのconfigとして書く。<code>filter.フィルタ名.clean</code>という形式で書いていく。 このリポジトリにだけ効けばよいので<code>--local</code>をつける。この作業はclone後などにリポジトリ毎に最初に1回だけ行う。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">git config --local filter.dater.clean <span class="s1">&#39;sed &#34;s/^date: \&#34;\&#34;/date: \&#34;$(date --iso-8601=s)\&#34;/g&#34;&#39;</span>
</code></pre></div><p>.gitattributes でどのファイルがどのフィルタを使うか定義する。daterという名前を付けたのでそれを使うようにする。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s1">&#39;content/**/*.md filter=dater&#39;</span> &gt; .gitattributes
</code></pre></div><p>動作確認。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">echo</span> <span class="s1">&#39;date: &#34;&#34;&#39;</span> &gt;&gt; content/posts/test.md
git add content/posts/test.md

<span class="c1"># ステージとの差分を確認し、置き換わっているものがステージされていることを確認</span>
git diff --cached
<span class="c1"># ワーキングディレクトリの内容は **置き換わっていない** 事を確認</span>
cat content/posts/test.md
</code></pre></div><p>ワーキングディレクトリの内容が置き換わっていないので、この後、修正し再度addしてしまうとまたその時の日時になってしまう。ちゃんとステージにある内容をチェックアウトすればいいのだが、忘れそうだ。
これは本意ではないので今回は採用しなかった。</p>
<h3 id="サーバーサイドフック">サーバーサイドフック</h3>
<p>今回の用途には使えない気がするので詳しく調べていない。</p>
<p>やりたいことがファイルの中身を書き換える性質上、仮にできたとしてもサーバサイドでやってしまうとコミットIDが変わってしまい、ローカルとリモートリポジトリで差ができてしまう。
なのでそれ以外の処理に使うものだと思う。特定ブランチのPushを拒否したり、CIを回すトリガーとかに使うとか。</p>
<ul>
<li><a href="https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_server_side_hooks">https://git-scm.com/book/en/v2/Customizing-Git-Git-Hooks#_server_side_hooks</a></li>
<li>GitHubの場合Enterprise版で可能
<ul>
<li><a href="https://docs.github.com/en/enterprise-server@3.2/admin/policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script">https://docs.github.com/en/enterprise-server@3.2/admin/policies/enforcing-policy-with-pre-receive-hooks/creating-a-pre-receive-hook-script</a></li>
</ul>
</li>
</ul>
]]></content></item><item><title>Hugoのmarkdown-render-hooksのメモ</title><link>https://fukasawah.github.io/posts/2021/04/22/hugo-markdown-render-hooks/</link><pubDate>Thu, 22 Apr 2021 08:35:00 +0900</pubDate><guid>https://fukasawah.github.io/posts/2021/04/22/hugo-markdown-render-hooks/</guid><description>HugoはMarkdownをHTMLに変換してくれるが、このときのHookを提供してくれている https://gohugo.io/getting-started/configuration-markup#markdown-render-hooks 例えばmarkdownでは画像を埋め込むこと</description><content type="html"><![CDATA[<p>HugoはMarkdownをHTMLに変換してくれるが、このときのHookを提供してくれている</p>
<p><a href="https://gohugo.io/getting-started/configuration-markup#markdown-render-hooks">https://gohugo.io/getting-started/configuration-markup#markdown-render-hooks</a></p>
<p>例えばmarkdownでは画像を埋め込むことができるが、画像のサムネイルも作りつつそれに合ったHTMLを出したい、<code>loading=&quot;lazy&quot;</code>をつけたい、といった場合、<code>layouts\_default\_markup\render-image.html</code>を用意することでできるようになる。</p>
<div class="highlight"><pre class="chroma"><code class="language-go" data-lang="go"><span class="p">{{</span> <span class="p">.</span><span class="nx">Destination</span> <span class="p">|</span> <span class="nx">safeURL</span> <span class="p">}}</span>
<span class="p">{{</span><span class="o">-</span> <span class="err">$</span><span class="nx">res</span> <span class="o">:=</span> <span class="p">.</span><span class="nx">Page</span><span class="p">.</span><span class="nx">Resources</span><span class="p">.</span><span class="nx">GetMatch</span> <span class="p">.</span><span class="nx">Destination</span> <span class="p">}}</span>
<span class="p">{{</span><span class="o">-</span> <span class="k">if</span> <span class="err">$</span><span class="nx">res</span> <span class="p">}}</span>
    <span class="p">{{</span><span class="o">-</span> <span class="err">$</span><span class="nx">image</span> <span class="o">:=</span> <span class="err">$</span><span class="nx">res</span><span class="p">.</span><span class="nx">Fit</span> <span class="s">&#34;300x300 jpg q50&#34;</span> <span class="p">}}</span>
    <span class="p">{{</span><span class="o">-</span> <span class="err">$</span><span class="nx">imageUrl</span> <span class="o">:=</span> <span class="err">$</span><span class="nx">image</span><span class="p">.</span><span class="nx">RelPermalink</span> <span class="p">}}</span>
    <span class="p">&lt;</span><span class="nx">figure</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="nx">a</span> <span class="nx">href</span><span class="p">=</span><span class="s">&#34;{{ .Destination | safeURL }}&#34;</span> <span class="nx">target</span><span class="p">=</span><span class="s">&#34;_blank&#34;</span><span class="p">&gt;</span>
        <span class="p">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="p">=</span><span class="s">&#34;{{ $imageUrl | safeURL }}&#34;</span> <span class="p">{{</span> <span class="nx">with</span> <span class="p">.</span><span class="nx">Text</span><span class="p">}}</span> <span class="nx">alt</span><span class="p">=</span><span class="s">&#34;{{ . }}&#34;</span><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span> <span class="p">{{</span> <span class="nx">with</span> <span class="p">.</span><span class="nx">Title</span><span class="p">}}</span> <span class="nx">title</span><span class="p">=</span><span class="s">&#34;{{ . }}&#34;</span><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span> <span class="nx">loading</span><span class="p">=</span><span class="s">&#34;lazy&#34;</span><span class="o">/</span><span class="p">&gt;</span>
    <span class="p">&lt;</span><span class="o">/</span><span class="nx">a</span><span class="p">&gt;</span>
    <span class="p">{{</span><span class="o">-</span> <span class="nx">with</span> <span class="p">.</span><span class="nx">Text</span> <span class="p">}}</span>
        <span class="p">&lt;</span><span class="nx">figcaption</span><span class="p">&gt;{{</span> <span class="p">.</span> <span class="p">}}&lt;</span><span class="o">/</span><span class="nx">figcaption</span><span class="p">&gt;</span>
    <span class="p">{{</span><span class="o">-</span> <span class="nx">end</span> <span class="p">}}</span>
    <span class="p">&lt;</span><span class="o">/</span><span class="nx">figure</span><span class="p">&gt;</span>
<span class="p">{{</span><span class="o">-</span> <span class="k">else</span> <span class="p">}}</span>
    <span class="p">&lt;</span><span class="nx">img</span> <span class="nx">src</span><span class="p">=</span><span class="s">&#34;{{ .Destination | safeURL }}&#34;</span> <span class="p">{{</span> <span class="nx">with</span> <span class="p">.</span><span class="nx">Text</span><span class="p">}}</span> <span class="nx">alt</span><span class="p">=</span><span class="s">&#34;{{ . }}&#34;</span><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span> <span class="p">{{</span> <span class="nx">with</span> <span class="p">.</span><span class="nx">Title</span><span class="p">}}</span> <span class="nx">title</span><span class="p">=</span><span class="s">&#34;{{ . }}&#34;</span><span class="p">{{</span> <span class="nx">end</span> <span class="p">}}</span> <span class="nx">loading</span><span class="p">=</span><span class="s">&#34;lazy&#34;</span><span class="o">/</span><span class="p">&gt;</span>
<span class="p">{{</span><span class="o">-</span> <span class="nx">end</span><span class="p">}}</span>
</code></pre></div><p>（直リンク画像などはelseに該当するはずだが、あまり動作確認してない）</p>
<p>結果サンプル。markdown viewerでもみれていて、HTMLではfigureタグで囲まれているはず。</p>
<p>
    <figure>
    <a href="images/index/2021-04-22-06-01-22.png" target="_blank" onclick="showOverlay(event)">
        <img src="/posts/2021/04/22/hugo-markdown-render-hooks/images/index/2021-04-22-06-01-22_hu13c7e3eabc1f076990944d10962ad5d6_4597_300x300_fit_q75_bgffffff_box_2.jpg"  alt="test"  loading="lazy"/>
    </a>
        <figcaption>test</figcaption>
    </figure></p>
<p>hugoのshortcodeと同じ要領なので全く同じことはshortcodeでもできるのだが、shortcodeはmarkdown viewerと相性が悪いのでこういうカスタマイズができるのはうれしい。</p>
]]></content></item><item><title>ワンタイムパスワードのTOTPを少し調べた</title><link>https://fukasawah.github.io/posts/2020/12/13/totp/</link><pubDate>Sun, 13 Dec 2020 22:06:40 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/12/13/totp/</guid><description>ワンタイムパスワード（OTP）のTOTPについて調べた。 ワンタイムパスワードは２段階認証をやったりするときに使う。何気なく使ってたけど、これ</description><content type="html"><![CDATA[<p>ワンタイムパスワード（OTP）のTOTPについて調べた。</p>
<p>ワンタイムパスワードは２段階認証をやったりするときに使う。何気なく使ってたけど、これどうやって実装するんだろう？と思っていたので感覚をつかみたかった。</p>
<h2 id="totptime-based-one-time-password">TOTP(Time-Based One-Time Password)</h2>
<h3 id="概要">概要</h3>
<p>TOTPはTime-Based One-Time Password の略でOTPの実装の一つ。RFC 6238で決まってる。</p>
<p><a href="https://tools.ietf.org/html/rfc6238">https://tools.ietf.org/html/rfc6238</a></p>
<p>秘密鍵を事前に共有して、秘密鍵と時間に基づいたコードを生成し、それをワンタイムパスワードとして使う。</p>
<h3 id="何をすればよいか">何をすればよいか</h3>
<p>ユーザ側はコードを生成するためのアプリを用意する必要がある。Google AuthenticatorやMicrosoft Authenticatorとか。</p>
<p>サービス側は秘密鍵の保持と検証するためにコードを生成と比較をする必要がある。</p>
<h3 id="コードの生成の仕方">コードの生成の仕方</h3>
<p>まず、秘密鍵を決める必要があるが、BASE32に基づいた値であればなんでもよい。BASE32は人が読みやすい値を採用した符号化方式。
なので、乱数で適当にバイナリ列を生成してBASE32に変換した値をユーザ毎に生成すればよい。（もちろん他の人が推測できないような乱数を使うようにしましょう。）</p>
<p>コードの生成は参照実装がRFCに書かれているが、たいていはライブラリがあるのでそれを利用すると簡単。
「TOTP 言語」で調べればそれっぽいライブラリが出てくる。
やることは秘密鍵と時間を基にコードを生成するだけなので、参照実装を読み解けば実装はできるはず（今回はやらない&hellip;）</p>
<h3 id="アプリと連携したい">アプリと連携したい</h3>
<p>RFCに従いアプリを作ればいいだけではありますが、アプリを作るのは大変なので、既存のものに乗っかるほうがよいでしょう。
有名なところでは、スマートフォンアプリにGoogle AuthenticatorやMicrosoft Authenticatorとかがある。WindowsであればWinAuthでも動作する。</p>
<p>最低限、秘密鍵の入力が出来れば連携は可能。</p>
<h3 id="アプリで読み取れるqrコードを生成したい">アプリで読み取れるQRコードを生成したい</h3>
<p>QRコード自体は「データ」をコンピュータで読み取れる画像で表現するだけのものなので、ここでは深くは触れない（QRコード内にロゴを入れたいとか色々あると思う。）</p>
<p>で、どういった「データ」を埋め込むかは、「URI形式でotpauth スキームに従った値」となる。</p>
<p>ただ、otpauthスキームは標準化されていないようで、アプリの動作による模様。残念。</p>
<p>Google AuthenticatorやMicrosoft Authenticatorについて調べた。</p>
<p>Google Authenticator は以下でまとまっている。
<a href="https://github.com/google/google-authenticator/wiki/Key-Uri-Format">https://github.com/google/google-authenticator/wiki/Key-Uri-Format</a></p>
<p>Microsoft Authenticatorはotpauthスキームはサポートしているが、明確な資料がなさそう。</p>
<p>Google AuthenticatorとMicrosoft Authenticatorのクエリパラメータの挙動の違いを見てみたが、secret以外のクエリパラメータは無視する模様。</p>
<table>
<thead>
<tr>
<th></th>
<th>Google</th>
<th>Microsoft</th>
</tr>
</thead>
<tbody>
<tr>
<td>secret</td>
<td>〇</td>
<td>〇</td>
</tr>
<tr>
<td>digits</td>
<td>〇</td>
<td>×(6)</td>
</tr>
<tr>
<td>algorithm</td>
<td>〇</td>
<td>×(SHA1)</td>
</tr>
<tr>
<td>period</td>
<td>〇</td>
<td>×(30)</td>
</tr>
<tr>
<td>issuer</td>
<td>〇</td>
<td>×</td>
</tr>
</tbody>
</table>
<p>カッコ内の数値はGoogleを基準にしたときに相当する値で、同じURIで両方のアプリをサポートしたいといった最大公約数的な考え方で行くと、SHA1で、6桁で、30秒としないといけない。</p>
<p>また、ISSUERについても、Googleはクエリパラメータのissuerを表示するが、MicrosoftはラベルのほうのISSUERを表示する。</p>
<p>というわけで、以下のような形になればよい。</p>
<p><code>&quot;otpauth://totp/ISSUER:USER?secret=SECRET&amp;issuer=ISSUER</code></p>
<p>（Googleのほうは、クエリパラメータのissuerとラベルのISSUERが一致するとラベルのほうのISSUERが省略されるが、一致しないとラベルのほうのISSUERが省略されないといった感じになる。まぁissuerの値は一緒にしておきましょうということ。）</p>
<h2 id="pythonによる実装">Pythonによる実装</h2>
<p>コードはいかにまとめました。</p>
<p><a href="https://github.com/fukasawah/python-totp-example">https://github.com/fukasawah/python-totp-example</a></p>
<h3 id="秘密鍵の生成">秘密鍵の生成</h3>
<p>やり方はなんでもいいです。ちなみに長さが5の倍数(byte)だとpaddingの削除が不要になります。</p>
<div class="highlight"><pre class="chroma"><code class="language-py:generate-key.py" data-lang="py:generate-key.py"><span class="kn">import</span> <span class="nn">base64</span>
<span class="kn">import</span> <span class="nn">random</span>

<span class="n">LEN</span><span class="o">=</span><span class="mi">20</span>
<span class="n">data</span> <span class="o">=</span> <span class="nb">bytes</span><span class="p">([</span><span class="n">random</span><span class="o">.</span><span class="n">getrandbits</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">LEN</span><span class="p">)])</span>

<span class="n">data_base32_str</span> <span class="o">=</span> <span class="n">base64</span><span class="o">.</span><span class="n">b32encode</span><span class="p">(</span><span class="n">data</span><span class="p">)</span><span class="o">.</span><span class="n">decode</span><span class="p">()</span><span class="o">.</span><span class="n">replace</span><span class="p">(</span><span class="s2">&#34;=&#34;</span><span class="p">,</span> <span class="s2">&#34;&#34;</span><span class="p">)</span>
<span class="k">print</span><span class="p">(</span><span class="n">data_base32_str</span><span class="p">)</span>
</code></pre></div><p>こんな感じに使い、BASE32の秘密鍵を生成します</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">python generate-key.py
<span class="c1"># =&gt; B3DQULIS7BASNVU2ZLYTZGU4NU7YNVF5</span>
</code></pre></div><h3 id="qrコード生成">QRコード生成</h3>
<p>QRコード生成には<code>qrcode</code>を用います。</p>
<p><a href="https://pypi.org/project/qrcode/">https://pypi.org/project/qrcode/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-py:qrcode-generate.py" data-lang="py:qrcode-generate.py"><span class="kn">import</span> <span class="nn">sys</span>
<span class="kn">import</span> <span class="nn">qrcode</span>
<span class="kn">from</span> <span class="nn">urllib.parse</span> <span class="kn">import</span> <span class="n">quote</span>


<span class="c1"># 手元で試すだけなので、引数で決める</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">&#34;required argument&#34;</span><span class="p">)</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
  
<span class="n">SECRET_KEY_BASE32</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="n">USER</span> <span class="o">=</span> <span class="s2">&#34;example@dummy.local&#34;</span>
<span class="n">ISSUER</span> <span class="o">=</span> <span class="s2">&#34;EXAMPLE&#34;</span>

<span class="n">uri</span> <span class="o">=</span> <span class="n">f</span><span class="s2">&#34;otpauth://totp/{quote(ISSUER)}:{quote(USER)}?secret={SECRET_KEY_BASE32}&amp;issuer={quote(ISSUER)}&#34;</span>

<span class="c1"># 後述するpyotpを使う場合は以下のようにしても同様のURIが得られる</span>
<span class="c1"># import pyotp</span>
<span class="c1"># totp = pyotp.TOTP(SECRET_KEY_BASE32)</span>
<span class="c1"># uri = totp.provisioning_uri(name=USER, issuer_name=ISSUER)</span>

<span class="c1"># 画像を生成(PILImageオブジェクトが得られる)</span>
<span class="n">image</span> <span class="o">=</span> <span class="n">qrcode</span><span class="o">.</span><span class="n">make</span><span class="p">(</span><span class="n">uri</span><span class="p">)</span>

<span class="c1"># 画像を保存</span>
<span class="n">image</span><span class="o">.</span><span class="n">save</span><span class="p">(</span><span class="s2">&#34;qrcode.png&#34;</span><span class="p">)</span>
</code></pre></div><p>こんな感じに使うと、&ldquo;qrcode.png&quot;が生成されます。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">python qrcode-generate.py B3DQULIS7BASNVU2ZLYTZGU4NU7YNVF5
</code></pre></div><p>出来上がったQRコードをアプリで取り込んでみましょう。</p>
<h3 id="検証するコード">検証するコード</h3>
<p>pyotpを使います。</p>
<p><a href="https://pypi.org/project/pyotp/">https://pypi.org/project/pyotp/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-python:totp-example.py" data-lang="python:totp-example.py"><span class="kn">import</span> <span class="nn">sys</span>

<span class="kn">import</span> <span class="nn">pyotp</span>

<span class="c1"># 手元で試すだけなので、引数で決める</span>
<span class="k">if</span> <span class="nb">len</span><span class="p">(</span><span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">2</span><span class="p">:</span>
    <span class="k">print</span><span class="p">(</span><span class="s2">&#34;required argument&#34;</span><span class="p">)</span>
    <span class="n">sys</span><span class="o">.</span><span class="n">exit</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>

<span class="n">SECRET_KEY_BASE32</span> <span class="o">=</span> <span class="n">sys</span><span class="o">.</span><span class="n">argv</span><span class="p">[</span><span class="mi">1</span><span class="p">]</span>

<span class="c1"># インスタンス生成</span>
<span class="n">totp</span> <span class="o">=</span> <span class="n">pyotp</span><span class="o">.</span><span class="n">TOTP</span><span class="p">(</span><span class="n">SECRET_KEY_BASE32</span><span class="p">)</span>

<span class="c1"># 定期的にコードが更新されることを確認する</span>
<span class="kn">import</span> <span class="nn">time</span>
<span class="n">prev_code</span> <span class="o">=</span> <span class="s2">&#34;&#34;</span>
<span class="k">while</span> <span class="bp">True</span><span class="p">:</span>
    <span class="n">code</span> <span class="o">=</span> <span class="n">totp</span><span class="o">.</span><span class="n">now</span><span class="p">()</span>  <span class="c1"># ワンタイムパスワードを得る</span>
    <span class="k">if</span> <span class="n">prev_code</span> <span class="o">==</span> <span class="n">code</span><span class="p">:</span>
        <span class="n">time</span><span class="o">.</span><span class="n">sleep</span><span class="p">(</span><span class="mi">1</span><span class="p">)</span>
        <span class="k">continue</span>
    <span class="k">print</span><span class="p">(</span><span class="n">code</span><span class="p">)</span>
    <span class="n">prev_code</span> <span class="o">=</span> <span class="n">code</span>
</code></pre></div><p>こんな感じに使うと、コンソールにもワンタイムパスワードが表示されます。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">python totp-example.py B3DQULIS7BASNVU2ZLYTZGU4NU7YNVF5
</code></pre></div><p>アプリ側の表示と、検証コードで表示されるコードが一致するはずです。</p>
<p>なので、実際は以下のようになります。</p>
<ul>
<li>ユーザ: アプリに表示されたコードを入力してサービス側に送信する</li>
<li>サービス: <code>totp.now()</code>で得られたコードと、ユーザが送信したコードが一致するかを検証する</li>
</ul>
<h2 id="その他">その他</h2>
<h3 id="winauth-windows上で動作するtotp対応アプリ">Winauth: Windows上で動作するTOTP対応アプリ</h3>
<p>スマートフォンでしか動作確認していなかったが、Windows上で確認するためのアプリが無いか探したら「Winauth」があった。</p>
<p><a href="https://github.com/winauth/winauth">https://github.com/winauth/winauth</a></p>
<p>「Support for time-based RFC 6238 authenticators (e.g. Google Authenticator) and HOTP counter-based authenticators」とあるので対応している</p>
<p>exeをダウンロードして起動したら以下の手順で追加する。</p>
<ul>
<li>Add→「Authenticator」を選択</li>
<li>秘密鍵を入力する箇所があるので、秘密鍵を入力</li>
<li>Time-basedを選択する</li>
<li>「Verify Authenticator」 をクリックして表示されるコードを確認</li>
</ul>
<p>
    <img src="./images/index/2020-12-14-00-26-33.png"   loading="lazy"/></p>
<h2 id="おわり">おわり</h2>
<p>実際に動くWebアプリを作ったり、TOTP用の秘密鍵はどう扱えばよいのか、他の方式(HOTP)の優劣とか使い分けとか、どんなときにワンタイムパスワードを要求するのかとかもう少し調べるところはありそう。</p>
<p>ワンタイムパスワードも面倒なのでデバイス認証にしたい場合とかも気になる。FIDO U2Fとか。</p>
]]></content></item><item><title>Raspberry Pi + ffmpegでライブカメラ</title><link>https://fukasawah.github.io/posts/2020/06/25/live-camera-on-the-raspberrypi-ffmpeg/</link><pubDate>Thu, 25 Jun 2020 19:24:37 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/06/25/live-camera-on-the-raspberrypi-ffmpeg/</guid><description>2019年8月ぐらいに書いて埃をかぶってたが発掘したので。 Rasberry Piとカメラモジュール届いたので、くっつけて起動する。 作業まとめ Rasberry Piの作業 https://www.raspberrypi.org/documentation/linux/usage/users.md で</description><content type="html"><![CDATA[<p>2019年8月ぐらいに書いて埃をかぶってたが発掘したので。</p>
<hr>
<p>Rasberry Piとカメラモジュール届いたので、くっつけて起動する。</p>
<h2 id="作業まとめ">作業まとめ</h2>
<h3 id="rasberry-piの作業">Rasberry Piの作業</h3>
<ul>
<li><a href="https://www.raspberrypi.org/documentation/linux/usage/users.md">https://www.raspberrypi.org/documentation/linux/usage/users.md</a> でユーザ名とパスワードを知る</li>
<li>piユーザは消さないほうが良いらしい（先駆者からの助言、ソースは忘れた&hellip;）</li>
<li>なるべく省力的に動かしたいので、 Raspbian Buster Lite にした。</li>
</ul>
<p>以下、SSH接続するまでにやったセットアップ。viがうまく動かなかったのでnanoを使っている。以下を行った。</p>
<ul>
<li>パスワード変更</li>
<li>キーボード設定</li>
<li>無線LAN接続</li>
<li>固定IPを割り当たるようにする</li>
<li>SSHサーバの起動</li>
</ul>
<pre><code># Password変更
passwd
# リポジトリを最新化し、パッケージも最新版を導入
sudo apt update
sudo apt upgrade

# ロケールを日本語にしたかったが、language-pack-jaが無いので、意味がなかった
# sudo localectl set-locale ja_JP.UTF-8
# キーボードについて日本語配列のキーマップを使うよう変更
sudo localectl set-keymap jp106
# 一旦再起動
sudo reboot

# 無線LAN接続
# refs: https://www.raspberrypi.org/documentation/configuration/wireless/wireless-cli.md
wpa_passphrase SSID名 | sed '/#psk=/d' | sudo tee -a /etc/wpa_supplicant/wpa_supplicant.conf
# &gt; ここでパスワードを入力

# SSIDを隠している場合、追加したnetworkブロックへssid_scan=1を追加
sudo nano /etc/wpa_supplicant/wpa_supplicant.conf

# ダウンしているはずなので起動
sudo ip link set wlan0 up

# 固定IPで割り当たるよう修正
# https://wiki.debian.org/NetworkConfiguration#Configuring_the_interface_manually にて、/etc/network/interfacesを使って割り当てるやり方が書かれているが、
# /etc/network/interfaces に以下の記述があったので、dhcpcdで行う。
#  # Please note that this file is written to be used with dhcpcd
#  # For static IP, consult /etc/dhcpcd.conf and 'man dhcpcd.conf'
# refs: https://qiita.com/momotaro98/items/fa94c0ed6e9e727fe15e
sudo nano /etc/dhcpcd.conf

# /etc/dhcpcd.confファイルの末端に以下を追加（IPやデフォルトゲートウェイ、ネームサーバは適宜変える）
interface wlan0
static ip_address=192.168.0.252
static routers=192.168.1.254
static domain_name_servers=192.168.1.254

# 変更したら、dhcpcdを再起動（以降は固定IPになる）
sudo systemctl restart dhcpcd

# SSHサーバを自動起動設定、起動
sudo systemctl enable ssh
sudo systemctl start ssh
</code></pre><p>ちなみにSSHはClient側のkeep-alive設定を入れて使った方がよい。60秒ぐらいで切れるので。</p>
<h3 id="カメラモジュールの有効化と撮影テスト">カメラモジュールの有効化と撮影テスト</h3>
<pre><code># refs: https://www.raspberrypi.org/documentation/configuration/camera.md
sudo raspi-config
# Interfacing Options -&gt; Camera を選んで有効か無効か選ぶ。もちろん有効を選ぶ
# その後、再起動する
</code></pre><p>カメラで撮影を試す。撮影したものはscpか何かで取得して眺める。</p>
<pre><code>
# 検出しているか確認する。「detected=1」となっていればOK。
vcgencmd get_camera

# 撮影確認（シャッターを切るまで5秒の待ち時間がある）
raspistill -o capture.jpg
</code></pre><p>デバイスを一応確認。ffmpegで入力デバイスの指定に使うので。</p>
<pre><code>v4l2-ctl --list-devices
</code></pre><pre><code>bcm2835-codec (platform:bcm2835-codec):
        /dev/video10
        /dev/video11
        /dev/video12

mmal service 16.1 (platform:bcm2835-v4l2):
        /dev/video0
</code></pre><h3 id="ffmpegのビルドハードウェアエンコードを使うため">ffmpegのビルド（ハードウェアエンコードを使うため）</h3>
<p>ffmpeg入れるがaptで配布されているものではハードウェアエンコードが使えない。なのでソースを取得して再ビルドする。</p>
<ul>
<li><code>h264_omx</code>は入っているが、依存が解決できず使えない。</li>
<li><code>--enable-omx-rpi</code> を付けて再ビルドする。see: <a href="https://github.com/FFmpeg/FFmpeg/blob/caabe1b4956d054bc3b077ae03a0d4205dbb843e/libavcodec/omx.c#L143">https://github.com/FFmpeg/FFmpeg/blob/caabe1b4956d054bc3b077ae03a0d4205dbb843e/libavcodec/omx.c#L143</a></li>
</ul>
<pre><code>sudo sed -i.bak 's/#deb-src /deb-src /g' /etc/apt/sources.list
sudo apt update

sudo apt build-dep ffmpeg
apt source ffmpeg
cd ffmpeg-*
./configure --prefix=/usr --extra-version=1 --toolchain=hardened --libdir=/usr/lib/arm-linux-gnueabihf --incdir=/usr/include/arm-linux-gnueabihf --arch=arm --enable-gpl --disable-stripping --enable-avresample --disable-filter=resample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librsvg --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-mmal --enable-omx-rpi
make -j5
sudo make install
</code></pre><p>バージョンを確認する</p>
<pre><code>pi@raspberrypi:~ $ ffmpeg -version
ffmpeg version 4.1.3-1 Copyright (c) 2000-2019 the FFmpeg developers
built with gcc 8 (Raspbian 8.3.0-6+rpi1)
configuration: --prefix=/usr --extra-version=1 --toolchain=hardened --libdir=/usr/lib/arm-linux-gnueabihf --incdir=/usr/include/arm-linux-gnueabihf --arch=arm --enable-gpl --disable-stripping --enable-avresample --disable-filter=resample --enable-avisynth --enable-gnutls --enable-ladspa --enable-libaom --enable-libass --enable-libbluray --enable-libbs2b --enable-libcaca --enable-libcdio --enable-libcodec2 --enable-libflite --enable-libfontconfig --enable-libfreetype --enable-libfribidi --enable-libgme --enable-libgsm --enable-libjack --enable-libmp3lame --enable-libmysofa --enable-libopenjpeg --enable-libopenmpt --enable-libopus --enable-libpulse --enable-librsvg --enable-librubberband --enable-libshine --enable-libsnappy --enable-libsoxr --enable-libspeex --enable-libssh --enable-libtheora --enable-libtwolame --enable-libvidstab --enable-libvorbis --enable-libvpx --enable-libwavpack --enable-libwebp --enable-libx265 --enable-libxml2 --enable-libxvid --enable-libzmq --enable-libzvbi --enable-lv2 --enable-omx --enable-openal --enable-opengl --enable-sdl2 --enable-libdc1394 --enable-libdrm --enable-libiec61883 --enable-chromaprint --enable-frei0r --enable-libx264 --enable-shared --enable-mmal --enable-omx-rpi
libavutil      56. 22.100 / 56. 22.100
libavcodec     58. 35.100 / 58. 35.100
libavformat    58. 20.100 / 58. 20.100
libavdevice    58.  5.100 / 58.  5.100
libavfilter     7. 40.101 /  7. 40.101
libavresample   4.  0.  0 /  4.  0.  0
libswscale      5.  3.100 /  5.  3.100
libswresample   3.  3.100 /  3.  3.100
libpostproc    55.  3.100 / 55.  3.100
</code></pre><h3 id="youtube-liveで配信を試す">Youtube Liveで配信を試す</h3>
<p>（※2020/06/25: 最近はライブ配信の管理画面が変わったので若干違うかもしれない）</p>
<p><a href="https://www.youtube.com/live_dashboard">https://www.youtube.com/live_dashboard</a></p>
<p>エンコーダの設定にある<code>サーバー URL</code>と<code>ストリームキー</code>を控えておく。これは後で<code>サーバーURL/ストリームキー</code>とスラッシュで結合して使う。</p>
<p>とりあえず動いた感じの設定。</p>
<h3 id="gpuに割り当てるメモリサイズを変更">GPUに割り当てるメモリサイズを変更</h3>
<pre><code>sudo nano /boot/config.txt
</code></pre><p>この<code>[all]セクションのgpu_mem</code>の値を256になるように書き換える</p>
<pre><code>[all]
#dtoverlay=vc4-fkms-v3d
start_x=1
#gpu_mem=128
gpu_mem=256
</code></pre><h3 id="起動時にモジュールを指定したオプションで読ませる">起動時にモジュールを指定したオプションで読ませる</h3>
<p>起動時にカメラのモジュールを指定したオプションで読ませるよう、所定のファイルを用意する。</p>
<p><code>max_video_width=2592 max_video_height=1944</code> の部分は適宜書き換える。設定の仕方は後述。</p>
<pre><code>echo &quot;bcm2835-v4l2&quot; | sudo tee /etc/modules-load.d/rpi-camera.conf
echo &quot;options bcm2835-v4l2 max_video_width=2592 max_video_height=1944&quot; | sudo tee /etc/modprobe.d/rpi-camera.conf
</code></pre><h3 id="ffmpegコマンド">ffmpegコマンド</h3>
<pre><code>ffmpeg -f v4l2 -s 1920x1080 -framerate 30 -i /dev/video0 -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -acodec aac -ab 16k -vcodec h264_omx -preset baseline -pix_fmt yuv420p -s 1920x1080 -b:v 3000k -threads 0 -f flv &quot;サーバーURL/ストリームキー&quot;
</code></pre><p>Youtube Liveでは無音でも/dev/zeroを指定しないとダメだった。省略できなさそう。</p>
<h2 id="トラブルシューティング">トラブルシューティング</h2>
<h3 id="配信のfpsを上がらない問題">配信のFPSを上がらない問題</h3>
<p>最初、適当にffmpegを実行しただけでは、FPSが出ない状態でカクカクになってしまった。
入力が1920x1080だと5fpsと低い値に、1280x720は22fpsでちょっとマシになったがこれ以上でない状態だった。</p>
<p>この現象で調べてみると以下のフォーラムを見つける。</p>
<p><a href="https://www.raspberrypi.org/forums/viewtopic.php?t=190220">https://www.raspberrypi.org/forums/viewtopic.php?t=190220</a></p>
<p>使えるフォーマットでベンチマークを取れるようなのでそれで見てみる。</p>
<pre><code># オプションなしでモジュール読み込み
sudo modprobe -r bcm2835-v4l2
sudo modprobe bcm2835-v4l2

# フォーマットの一覧
v4l2-ctl --list-formats

# 各フォーマットのベンチマーク
for i in `seq  0 $(($(v4l2-ctl --list-formats | wc -l) - 4 ))`; do
  echo &quot;&quot;
  echo &quot;--- $i ---&quot;;
  v4l2-ctl -v width=1920,height=1080,pixelformat=$i;
  timeout 5 v4l2-ctl --stream-mmap=3 --stream-to=/dev/null --stream-count=100;
done
</code></pre><p>他は5fps程度だが、MJPGやH264を使うときだけ確かに30fps出ることがわかった。これをそのまま取り込めないかな？と設定をいじる。</p>
<p>input_formatをmjpegにしたら配信は出来たけど、FPSが3でCPU使用率が25%でちょっと使い物にならない。（4CPUと認識しているので1CPUを使い切っている感じ）</p>
<pre><code>ffmpeg -f v4l2 -input_format mjpeg -s 1920x1080 -framerate 30 -i /dev/video0 -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -acodec aac -ab 16k -vcodec h264_omx -preset baseline -pix_fmt yuv420p -s 1920x1080 -b:v 3000k -threads 0 -f flv &quot;サーバー URL/ストリームキー&quot;
</code></pre><p>入力をh264にしてみる。30fpsだとプログラムが死んだので15fpsに。配信できなくはないがCPU使用率が90%になってしまい非常に辛い様子だった。</p>
<pre><code>ffmpeg -f v4l2 -input_format h264 -s 1920x1080 -framerate 15 -i /dev/video0 -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero -acodec aac -ab 16k -vcodec h264_omx -preset baseline -pix_fmt yuv420p -s 1920x1080 -b:v 3000k -threads 0 -f flv &quot;サーバー URL/ストリームキー&quot;
</code></pre><p>他の方法を探ると以下のような情報を見つける。</p>
<p><a href="https://wiki.archlinux.jp/index.php/Raspberry_Pi#Raspberry_Pi_%E3%82%AB%E3%83%A1%E3%83%A9%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB">https://wiki.archlinux.jp/index.php/Raspberry_Pi#Raspberry_Pi_%E3%82%AB%E3%83%A1%E3%83%A9%E3%83%A2%E3%82%B8%E3%83%A5%E3%83%BC%E3%83%AB</a></p>
<blockquote>
<p>デフォルトでは V4L2 ドライバーを使って録画できる動画の解像度は 1280x720 が最大です。それ以上にしようとすると動画が 4 fps 以下にまで落ち込みます。</p>
</blockquote>
<p>この現象が本質っぽい。以下のようにしてオプションを与えてモジュールを有効化しなおす。</p>
<p>カーネルのモジュールのオプションはこのコマンドで再起動なしで変更できるのでこれで試行錯誤できる。（が、起動時はオプション無しで起動するようなので後述）</p>
<pre><code>sudo modprobe -r bcm2835-v4l2
sudo modprobe bcm2835-v4l2 max_video_width=2592 max_video_height=1944
</code></pre><p>なぜこれが影響するのかわからないがとりあえず設定してみる。設定をするとGPUメモリが少なすぎることで以下のようなエラーが出て使えなくなる。</p>
<pre><code>[video4linux2,v4l2 @ 0x1fd5400] ioctl(VIDIOC_STREAMON): Operation not permitted
/dev/video0: Operation not permitted
</code></pre><pre><code>[h264_omx @ 0x17345b0] Using OMX.broadcom.video_encode
[h264_omx @ 0x17345b0] OMX error 80001000
[h264_omx @ 0x17345b0] err 80001000 (-2147479552) on line 561
Error initializing output stream 0:0 -- Error while opening encoder for output stream #0:0 - maybe incorrect parameters such as bit_rate, rate, width or height
</code></pre><p>なので、gpu_memを256MBぐらい割り当てる。</p>
<pre><code>sudo nano /boot/config.txt
</code></pre><p><code>[all]セクションのgpu_mem</code>の値を256に書き換える。再起動しないと反映されない。</p>
<pre><code>[all]
#dtoverlay=vc4-fkms-v3d
start_x=1
#gpu_mem=128
gpu_mem=256
</code></pre><p>起動時にカーネルモジュールを指定したオプションで実行するよう、所定のファイルを用意する。</p>
<pre><code>echo &quot;bcm2835-v4l2&quot; | sudo tee /etc/modules-load.d/rpi-camera.conf
echo &quot;options bcm2835-v4l2 max_video_width=2592 max_video_height=1944&quot; | sudo tee /etc/modprobe.d/rpi-camera.conf
</code></pre><p>再起動し確かめてみる。</p>
<pre><code>ffmpeg -f v4l2 -input_format yuv444p -s 1920x1080 -framerate 30 -i /dev/video0 \
  -ar 44100 -ac 2 -acodec pcm_s16le -f s16le -ac 2 -i /dev/zero \
  -acodec aac -ab 16k -vcodec h264_omx -preset baseline -pix_fmt yuv420p -s 1920x1080 -b:v 4000k -threads 0 -f flv &quot;サーバー URL/ストリームキー&quot;
</code></pre><p>これで28fps付近で安定するようになったし、CPU使用率も5%ぐらいととても余裕ができた。</p>
<h3 id="カメラモジュールのオプションについて">カメラモジュールのオプションについて</h3>
<p>入力に合わせればいいじゃん、と<code>max_video_width=1920 max_video_height=1080</code>にすると性能が落ち込んだり、一部フォーマットが実行できなくなったりした。どうやら単純に取り込みたいサイズを指定するのではなく、カメラによって設定を合わせる必要があるらしい。</p>
<p>参考にしたWikiでは<code>max_video_width=3240 max_video_height=2464</code>となっているが、これは800万画素(3240x2464)の設定なので、ここはカメラによって変わる。</p>
<p>分からない場合は<code>ffmpeg -f video4linux2 -list_formats all -i /dev/video0</code>等から見ることができる模様。</p>
<pre><code>[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :     yuv420p :     Planar YUV 4:2:0 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :     yuyv422 :           YUYV 4:2:2 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :       rgb24 :     24-bit RGB 8-8-8 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Compressed:       mjpeg :            JFIF JPEG : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Compressed:        h264 :                H.264 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Compressed:       mjpeg :          Motion-JPEG : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       : Unsupported :           YVYU 4:2:2 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       : Unsupported :           VYUY 4:2:2 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :     uyvy422 :           UYVY 4:2:2 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :        nv12 :         Y/CbCr 4:2:0 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :       bgr24 :     24-bit BGR 8-8-8 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :     yuv420p :     Planar YVU 4:2:0 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       : Unsupported :         Y/CrCb 4:2:0 : {32-2592, 2}x{32-1944, 2}
[video4linux2,v4l2 @ 0x1cdb1c0] Raw       :        bgr0 : 32-bit BGRA/X 8-8-8-8 : {32-2592, 2}x{32-1944, 2}

</code></pre><p><code>{32-2592, 2}x{32-1944, 2}</code> とあるので、最大2592x1944となる。</p>
]]></content></item><item><title>libgit2を使ってみる</title><link>https://fukasawah.github.io/posts/2020/05/04/hello-libgit2/</link><pubDate>Mon, 04 May 2020 19:50:31 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/05/04/hello-libgit2/</guid><description>https://github.com/libgit2/libgit2 WSL2 + Ubuntu 18.04 でどんな感じに使えるか試した。 ビルド sudo apt update sudo apt install gcc cmake libssl-dev zlib1g-dev libssh2-1-dev pkg-copnfig git clone https://github.com/libgit2/libgit2.git cd libgit2 git checkout v1.0.0 mkdir build &amp;amp;&amp;amp; cd build cmake .. make -j ビルドはただの趣味でお遊びなのでイン</description><content type="html"><![CDATA[<p><a href="https://github.com/libgit2/libgit2">https://github.com/libgit2/libgit2</a></p>
<p>WSL2 + Ubuntu 18.04 でどんな感じに使えるか試した。</p>
<h3 id="ビルド">ビルド</h3>
<pre><code>sudo apt update
sudo apt install gcc cmake libssl-dev zlib1g-dev libssh2-1-dev pkg-copnfig

git clone https://github.com/libgit2/libgit2.git
cd libgit2
git checkout v1.0.0

mkdir build &amp;&amp; cd build
cmake ..
make -j
</code></pre><p>ビルドはただの趣味でお遊びなのでインストールはしない。</p>
<p>pkg-copnfigを入れないとlibssh2を見つけてくれなかった。<a href="https://github.com/libgit2/libgit2/commit/0f62e4c7393366acd8ab0887c069d9929c358d07">関連コミット</a></p>
<h2 id="libgit2をc言語で使う">libgit2をC言語で使う</h2>
<p>サンプルをコピペしたりして書いた。</p>
<ul>
<li><a href="https://github.com/libgit2/libgit2/tree/master/examples">https://github.com/libgit2/libgit2/tree/master/examples</a></li>
<li><a href="https://libgit2.org/libgit2/#v1.0.0">https://libgit2.org/libgit2/#v1.0.0</a></li>
</ul>
<p>サンプルの内容は、gitの良くあるコマンドをlibgi2を使って模倣するサンプルらしく、examples/lg2.cを起点にサブコマンドが実装されている（gitコマンドの細かい引数までサポートしているわけではない）。</p>
<ul>
<li><code> git_libgit2_init()</code> を最初に呼ぶ（忘れるとSegmentation Faultする）</li>
<li>たいていの関数は戻り値が0未満ならエラーを表現しているので必要に応じてチェックする（<code>git_*_free</code>とか<code>git_oid_tostr</code>とか例外はある）</li>
<li><code>git_*_free</code>は対応する型で呼ぶ必要がある。それ以外は動きは<code>free</code>と一緒で、NULLポインタは安全、2重開放するとSegmentation Faultになる</li>
<li><code>git_oid_tostr_s</code>の戻り値はオブジェクトIDの文字列表現で、文字列のメモリ確保してるのか？となったがスレッドローカルで持ってるとドキュメントに書いてあった。</li>
</ul>
<p>バインディング無いとしんどいですね</p>
<h2 id="cloneするだけ">cloneするだけ</h2>
<p>実行するとcloneするだけの簡単なもの。</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;git2.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
	<span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span><span class="p">;</span>
  <span class="n">git_libgit2_init</span><span class="p">();</span>

  <span class="n">git_clone</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="s">&#34;https://github.com/octocat/Hello-World.git&#34;</span><span class="p">,</span> <span class="s">&#34;hello-world&#34;</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">);</span>

  <span class="k">if</span><span class="p">(</span><span class="n">repo</span><span class="p">){</span>
    <span class="n">git_repository_free</span><span class="p">(</span><span class="n">repo</span><span class="p">);</span>
  <span class="p">}</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>buildディレクトリにあるlibgit2を使ってビルド＆実行</p>
<pre><code>gcc main.c -I ../include -L./ -lgit2
LD_LIBRARY_PATH=./ ./a.out
</code></pre><p><code>sudo apt install libgit2-dev</code> をしていれば&hellip;と思ったが、実際に試すとubuntu 18.04では<code>v0.26</code>の時点のlibgit2らしく、<code>git_error_last</code>が存在せずコンパイルできなかった。<a href="https://github.com/libgit2/libgit2/commit/f673e232afe22eb865cdc915e55a2df6493f0fbb">該当のコミット</a></p>
<p>なので<code>giterr_last</code>に書き換えたうえであればコンパイルできた。</p>
<pre><code>gcc main.c -l git2
./a.out
</code></pre><h2 id="空のコミットを重ねるだけリポジトリがあればそのまま使い無ければ作る">空のコミットを重ねるだけ（リポジトリがあればそのまま使い、無ければ作る）</h2>
<p>コミット後にログも出す。
変なマクロを書いたけど気にしない。</p>
<div class="highlight"><pre class="chroma"><code class="language-c" data-lang="c"><span class="cp">#include</span> <span class="cpf">&lt;stdio.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#include</span> <span class="cpf">&lt;git2.h&gt;</span><span class="cp">
</span><span class="cp"></span>
<span class="cp">#define ASSERT(expr) do { \
</span><span class="cp">  int ret = (expr); \
</span><span class="cp">  if (ret != 0) { \
</span><span class="cp">    fprintf(stderr, &#34;&#39;&#34; #expr &#34;&#39; was not return of zero (ret=%d).\n&#34;, ret); \
</span><span class="cp">    const git_error *err = giterr_last(); \
</span><span class="cp">		if (err) { \
</span><span class="cp">      fprintf(stderr, &#34;ERROR %d: %s\n&#34;, err-&gt;klass, err-&gt;message); \
</span><span class="cp">    } \
</span><span class="cp">    abort(); \
</span><span class="cp">  } \
</span><span class="cp">}while(0)
</span><span class="cp"></span>

<span class="kt">void</span> <span class="nf">print_commit</span><span class="p">(</span><span class="k">const</span> <span class="n">git_commit</span> <span class="o">*</span><span class="n">commit</span><span class="p">){</span>
    <span class="kt">char</span> <span class="n">buf</span><span class="p">[</span><span class="n">GIT_OID_HEXSZ</span> <span class="o">+</span> <span class="mi">1</span><span class="p">];</span>
    <span class="k">const</span> <span class="n">git_signature</span> <span class="o">*</span><span class="n">parent_sig</span> <span class="o">=</span> <span class="n">git_commit_author</span><span class="p">(</span><span class="n">commit</span><span class="p">);</span>

    <span class="c1">// buf == bufptr だが、空文字列のptrが返る場合がある
</span><span class="c1"></span>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">bufptr</span> <span class="o">=</span> <span class="n">git_oid_tostr</span><span class="p">(</span><span class="n">buf</span><span class="p">,</span> <span class="k">sizeof</span><span class="p">(</span><span class="n">buf</span><span class="p">),</span> <span class="n">git_commit_id</span><span class="p">(</span><span class="n">commit</span><span class="p">));</span>
    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">message</span> <span class="o">=</span> <span class="n">git_commit_message</span><span class="p">(</span><span class="n">commit</span><span class="p">);</span>

    <span class="c1">// 1行出力するため終端を探す
</span><span class="c1"></span>    <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">eos</span> <span class="o">=</span> <span class="n">message</span><span class="p">;</span>
    <span class="k">for</span><span class="p">(;</span> <span class="o">*</span><span class="n">eos</span> <span class="o">!=</span> <span class="sc">&#39;\n&#39;</span> <span class="o">&amp;&amp;</span> <span class="o">*</span><span class="n">eos</span> <span class="o">!=</span> <span class="sc">&#39;\0&#39;</span><span class="p">;</span> <span class="n">eos</span><span class="o">++</span><span class="p">);</span>
    <span class="n">printf</span><span class="p">(</span><span class="s">&#34;%s (%s &lt;%s&gt;): %.*s</span><span class="se">\n</span><span class="s">&#34;</span><span class="p">,</span>
      <span class="n">bufptr</span><span class="p">,</span>
      <span class="n">parent_sig</span><span class="o">-&gt;</span><span class="n">name</span><span class="p">,</span>
      <span class="n">parent_sig</span><span class="o">-&gt;</span><span class="n">email</span><span class="p">,</span>
      <span class="p">(</span><span class="kt">int</span><span class="p">)(</span><span class="n">eos</span> <span class="o">-</span> <span class="n">message</span><span class="p">),</span>
      <span class="n">message</span>
    <span class="p">);</span>
<span class="p">}</span>

<span class="kt">int</span> <span class="nf">main</span><span class="p">(){</span>
  <span class="k">const</span> <span class="kt">char</span> <span class="o">*</span><span class="n">repodir</span> <span class="o">=</span> <span class="s">&#34;hello-world&#34;</span><span class="p">;</span>
	<span class="n">git_repository</span> <span class="o">*</span><span class="n">repo</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  
  <span class="c1">// libgit2の初期化
</span><span class="c1"></span>  <span class="n">git_libgit2_init</span><span class="p">();</span>

  <span class="c1">// &#34;hello-world&#34; リポジトリがあるかチェック
</span><span class="c1"></span>  <span class="k">if</span><span class="p">(</span><span class="n">git_repository_open_ext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="n">repodir</span><span class="p">,</span> <span class="mi">0</span><span class="p">,</span> <span class="nb">NULL</span><span class="p">)</span> <span class="o">&lt;</span> <span class="mi">0</span><span class="p">){</span>
    <span class="c1">// 無い場合はhello-worldリポジトリをcloneして使う
</span><span class="c1"></span>    <span class="c1">//ASSERT(git_clone(&amp;repo, &#34;https://github.com/octocat/Hello-World.git&#34;, repodir, NULL));
</span><span class="c1"></span>
    <span class="c1">// リポジトリを作成する
</span><span class="c1"></span>    <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_repository_init</span><span class="p">(</span><span class="o">&amp;</span><span class="n">repo</span><span class="p">,</span> <span class="n">repodir</span><span class="p">,</span> <span class="mi">0</span><span class="p">));</span>
  <span class="p">}</span>

  <span class="c1">// コミット時の名前とEmailの情報を得る
</span><span class="c1"></span>	<span class="n">git_signature</span> <span class="o">*</span><span class="n">sig</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_signature_default</span><span class="p">(</span><span class="o">&amp;</span><span class="n">sig</span><span class="p">,</span> <span class="n">repo</span><span class="p">));</span>

  <span class="c1">// インデックスを用意する
</span><span class="c1"></span>	<span class="n">git_index</span> <span class="o">*</span><span class="n">index</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_repository_index</span><span class="p">(</span><span class="o">&amp;</span><span class="n">index</span><span class="p">,</span> <span class="n">repo</span><span class="p">));</span>

  <span class="c1">// インデックスにあるファイルの内容をツリーに書き込み、そのツリーオブジェクトを得る
</span><span class="c1"></span>  <span class="c1">// （インデックスは変化していないので、空の状態）
</span><span class="c1"></span>	<span class="n">git_oid</span> <span class="n">tree_id</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_index_write_tree</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree_id</span><span class="p">,</span> <span class="n">index</span><span class="p">));</span>

  <span class="c1">// インデックスを書き込む
</span><span class="c1"></span>  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_index_write</span><span class="p">(</span><span class="n">index</span><span class="p">));</span>

  <span class="c1">// ツリーオブジェクトからツリーを得る
</span><span class="c1"></span>	<span class="n">git_tree</span> <span class="o">*</span><span class="n">tree</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_tree_lookup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tree</span><span class="p">,</span> <span class="n">repo</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">tree_id</span><span class="p">));</span>

  <span class="c1">// &#34;HEAD&#34; の最新のコミットを得る
</span><span class="c1"></span>  <span class="c1">// これを親のコミットに使う（もしコミットが無い状態であればparentはNULLのままになる）
</span><span class="c1"></span>	<span class="n">git_object</span> <span class="o">*</span><span class="n">parent</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
	<span class="n">git_reference</span> <span class="o">*</span><span class="n">ref</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
  <span class="n">git_revparse_ext</span><span class="p">(</span><span class="o">&amp;</span><span class="n">parent</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">ref</span><span class="p">,</span> <span class="n">repo</span><span class="p">,</span> <span class="s">&#34;HEAD&#34;</span><span class="p">);</span>

  <span class="c1">// コミットオブジェクトを作成
</span><span class="c1"></span>  <span class="n">git_oid</span> <span class="n">commit_id</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_commit_create_v</span><span class="p">(</span>
			<span class="o">&amp;</span><span class="n">commit_id</span><span class="p">,</span> <span class="n">repo</span><span class="p">,</span> <span class="s">&#34;HEAD&#34;</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span> <span class="n">sig</span><span class="p">,</span>
			<span class="nb">NULL</span><span class="p">,</span> <span class="s">&#34;Create empty commit</span><span class="se">\n\n</span><span class="s">hello hello&#34;</span><span class="p">,</span> <span class="n">tree</span><span class="p">,</span>
      <span class="mi">1</span><span class="p">,</span> <span class="n">parent</span><span class="p">));</span>

  <span class="c1">// コミットログを全部辿る（もう少しいい感じのやり方はあるかもしれない）
</span><span class="c1"></span>  <span class="n">git_commit</span> <span class="o">*</span><span class="n">commit</span><span class="p">;</span>
  <span class="n">ASSERT</span><span class="p">(</span><span class="n">git_commit_lookup</span><span class="p">(</span><span class="o">&amp;</span><span class="n">commit</span><span class="p">,</span> <span class="n">repo</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">commit_id</span><span class="p">));</span>
  <span class="k">while</span><span class="p">(</span><span class="n">commit</span><span class="p">){</span>
    <span class="n">git_commit</span> <span class="o">*</span><span class="n">tmp</span> <span class="o">=</span> <span class="nb">NULL</span><span class="p">;</span>
    <span class="n">print_commit</span><span class="p">(</span><span class="n">commit</span><span class="p">);</span>
    <span class="n">git_commit_parent</span><span class="p">(</span><span class="o">&amp;</span><span class="n">tmp</span><span class="p">,</span> <span class="n">commit</span><span class="p">,</span> <span class="mi">0</span><span class="p">);</span> <span class="c1">// マージコミットを考慮していない
</span><span class="c1"></span>    <span class="n">git_commit_free</span><span class="p">(</span><span class="n">commit</span><span class="p">);</span>
    <span class="n">commit</span> <span class="o">=</span> <span class="n">tmp</span><span class="p">;</span>
  <span class="p">}</span>

  <span class="c1">// 後始末
</span><span class="c1"></span>  <span class="n">git_tree_free</span><span class="p">(</span><span class="n">tree</span><span class="p">);</span>
	<span class="n">git_index_free</span><span class="p">(</span><span class="n">index</span><span class="p">);</span>
	<span class="n">git_signature_free</span><span class="p">(</span><span class="n">sig</span><span class="p">);</span>
  <span class="n">git_object_free</span><span class="p">(</span><span class="n">parent</span><span class="p">);</span>
  <span class="n">git_reference_free</span><span class="p">(</span><span class="n">ref</span><span class="p">);</span>
  
  <span class="n">git_repository_free</span><span class="p">(</span><span class="n">repo</span><span class="p">);</span>

  <span class="k">return</span> <span class="mi">0</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><h3 id="ファイルをインデックスに追加する">ファイルをインデックスに追加する</h3>
<p>see: <a href="https://github.com/libgit2/libgit2/blob/v1.0.0/examples/add.c#L46">https://github.com/libgit2/libgit2/blob/v1.0.0/examples/add.c#L46</a></p>
<p>(飽きた)</p>
<h2 id="おわり">おわり</h2>
<p>これだけで6時間ぐらいかけた。Gitの内部知識はあったが、実際にlibgit2での操作がイメージできずに非常に時間がかかってる。結局サンプルをつぎはぎしただけ。あと久々のC言語がちょっと辛かった。バインディングを使おうと思った（小並感）</p>
<p>でも本当にやりたいのはこういうのではなくて、gitのデータの保存先にファイルシステム以外(DBとかクラウドストレージとか)が使えるかを知りたかった。
実際、gitlabやgithubはどうやってるんだろう。さすがにファイルシステム1個を共有してるとは思えないし。</p>
<p>調べた感じ、libgit2はバックエンド実装の差し替えができるらしく、以下にサンプルの実装がある。</p>
<ul>
<li><a href="https://github.com/libgit2/libgit2-backends">https://github.com/libgit2/libgit2-backends</a></li>
</ul>
<p>ちなみにJava実装のJGitがあり、バックエンドにCassandraを使った物もあるようだが、分散ファイルシステムに乗り換えたらしい。</p>
<ul>
<li><a href="https://www.eclipse.org/lists/jgit-dev/msg02818.html">https://www.eclipse.org/lists/jgit-dev/msg02818.html</a>
<ul>
<li>
<blockquote>
<p>Keep in mind that Shawn Pearce reached the conclusion that a distributed key-value store is not the right solution and moved to a DFS implementation.</p>
</blockquote>
</li>
</ul>
</li>
<li><a href="https://github.com/spearce/jgit_cassandra">https://github.com/spearce/jgit_cassandra</a></li>
</ul>
<p>以下は調べてみたいとこのメモ</p>
<ul>
<li>AWS S3を使ったODB実装の例があるか、その際RefDBをどうするか</li>
<li>Azure Files（NFS）で実用性に耐えうるかどうか</li>
</ul>
]]></content></item><item><title>Bashのtimeは複合コマンドにも使える</title><link>https://fukasawah.github.io/posts/2020/04/14/bash-time/</link><pubDate>Tue, 14 Apr 2020 17:03:33 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/04/14/bash-time/</guid><description>bashのtimeは実行に要した時間がわかる。 $ time seq 1 100 1 ... 100 real 0m0.045s user 0m0.000s sys 0m0.015s で、これはコマンドでもビルトインコマンドでもなく、パイプラインで使</description><content type="html"><![CDATA[<p>bashのtimeは実行に要した時間がわかる。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">$ <span class="nb">time</span> seq <span class="m">1</span> <span class="m">100</span>
<span class="m">1</span>
...
<span class="m">100</span>

real    0m0.045s
user    0m0.000s
sys     0m0.015s
</code></pre></div><p>で、これはコマンドでもビルトインコマンドでもなく、パイプラインで使う「予約語」であるらしく、timeの後ろには任意の<strong>bashのコマンド</strong>が書ける。</p>
<p><a href="https://linuxjm.osdn.jp/html/GNU_bash/man1/bash.1.html#lbAM">https://linuxjm.osdn.jp/html/GNU_bash/man1/bash.1.html#lbAM</a></p>
<p>例えば２つ以上のコマンドの実行にかかった時間が知りたいときを考える。</p>
<p>timeがもし「普通のコマンド」であれば多分こうするしかない。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="nb">time</span> bash -c <span class="s1">&#39;seq 1 100 | sed &#34;s#\(.*\)#\1.dat#&#34;&#39;</span>
<span class="c1"># もしくは１回ファイルに書き出してから測る</span>
<span class="nb">echo</span> <span class="s1">&#39;seq 1 100 | sed &#34;s#\(.*\)#\1.dat#&#34;&#39;</span> &gt; test.sh
<span class="nb">time</span> bash test.sh
</code></pre></div><p>しかし、timeの後ろにはbashの複合コマンドも使えるのでこう書ける。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># サブシェルで実行</span>
<span class="nb">time</span> <span class="o">(</span>seq <span class="m">1</span> <span class="m">100</span> <span class="p">|</span> sed <span class="s2">&#34;s#\(.*\)#\1.dat#&#34;</span><span class="o">)</span>

<span class="c1"># 同シェルで実行（末尾のセミコロンの付け忘れに注意）</span>
<span class="nb">time</span> <span class="o">{</span> seq <span class="m">1</span> <span class="m">100</span> <span class="p">|</span> sed <span class="s2">&#34;s#\(.*\)#\1.dat#&#34;</span><span class="p">;</span> <span class="o">}</span>

<span class="c1"># forで</span>
<span class="nb">time</span> <span class="k">for</span> i in <span class="sb">`</span>seq <span class="m">1</span> 100<span class="sb">`</span><span class="p">;</span> <span class="k">do</span>
  <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$i</span><span class="s2">.dat&#34;</span>
<span class="k">done</span>

<span class="c1"># whileも</span>
<span class="nb">time</span> <span class="k">while</span> <span class="nb">read</span> line <span class="p">;</span> <span class="k">do</span>
  <span class="nb">echo</span> <span class="s2">&#34;</span><span class="nv">$line</span><span class="s2">.dat&#34;</span>
<span class="k">done</span> &lt; &lt;<span class="o">(</span>seq <span class="m">1</span> 100<span class="o">)</span>

</code></pre></div><p>これで思いつきでたくさんコマンドを組み合わせた場合でも簡単に時間が測れる。</p>
<p>bashの予約語のtimeの話なので、<code>/usr/bin/time</code> を使う方法では当然ダメ。</p>
]]></content></item><item><title>テンプレートエンジン frep</title><link>https://fukasawah.github.io/posts/2020/04/08/frep/</link><pubDate>Wed, 08 Apr 2020 01:41:16 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/04/08/frep/</guid><description>frepというGolang製のテンプレートエンジンを見つけた。 https://github.com/subchen/frep 環境変数や引数、設定ファイルを元にテンプレート処理を行うというもの。テンプレ</description><content type="html"><![CDATA[<p>frepというGolang製のテンプレートエンジンを見つけた。</p>
<p><a href="https://github.com/subchen/frep">https://github.com/subchen/frep</a></p>
<p>環境変数や引数、設定ファイルを元にテンプレート処理を行うというもの。テンプレート処理にはGolangのtext/templateを採用しているので、仕様もわかりやすい。</p>
<p>Windows/Linuxで動作して一貫したテンプレートエンジンが欲しいなぁと思っていて、これは割といい感じがする。</p>
<p>単純な変数を定数に置き換えるぐらいならenvsubstでもよいのだけど、やっぱりif文ぐらいは書きたくなることが多い。</p>
]]></content></item><item><title>GitHub Actionsを使ってHugoのコンテンツをデプロイ</title><link>https://fukasawah.github.io/posts/2020/04/02/hugo-with-github-actions/</link><pubDate>Thu, 02 Apr 2020 09:34:44 +0900</pubDate><guid>https://fukasawah.github.io/posts/2020/04/02/hugo-with-github-actions/</guid><description>GitHub Actionsを使ってHugoをデプロイするのは以下を行えば簡単にできる。 https://github.com/peaceiris/actions-hugo 外部リポジトリにPushするためのデプロイキーの設定をした。こ</description><content type="html"><![CDATA[<p>GitHub Actionsを使ってHugoをデプロイするのは以下を行えば簡単にできる。</p>
<p><a href="https://github.com/peaceiris/actions-hugo">https://github.com/peaceiris/actions-hugo</a></p>
<p>外部リポジトリにPushするためのデプロイキーの設定をした。この手順もドキュメントにちゃんと書いてあった。</p>
<ul>
<li><a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy_key">https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-deploy_key</a></li>
<li><a href="https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key">https://github.com/peaceiris/actions-gh-pages#%EF%B8%8F-create-ssh-deploy-key</a></li>
</ul>
<p>というわけで、ワークフローはこんな感じになった。</p>
<p><a href="https://github.com/fukasawah/blog/blob/master/.github/workflows/gh-pages.yml">https://github.com/fukasawah/blog/blob/master/.github/workflows/gh-pages.yml</a></p>
<p>以下、ハマったところ。</p>
<h3 id="タイムゾーンが違う">タイムゾーンが違う</h3>
<p>Actionsでデプロイされた内容を見てみたら表示されてる日時のタイムゾーンがUTCになってた。</p>
<p>原因はGitHub Actionsで動いているコンテナが日本のタイムゾーンではないため。考えてみれば当たり前という感じだった。</p>
<p>以下を参考に <code>TZ</code> 環境変数を設定して実行するようにした。</p>
<p><a href="https://discourse.gohugo.io/t/dateformat-force-a-specific-timezone/9860/2">https://discourse.gohugo.io/t/dateformat-force-a-specific-timezone/9860/2</a></p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="w">      </span>- <span class="k">name</span><span class="p">:</span><span class="w"> </span>Build<span class="w">
</span><span class="w">        </span><span class="k">run</span><span class="p">:</span><span class="w"> </span>TZ=Asia/Tokyo<span class="w"> </span>hugo<span class="w"> </span>--minify<span class="w">
</span></code></pre></div><h3 id="actioncheckoutが---depth-1-を使っている">action@checkoutが <code>--depth 1</code> を使っている</h3>
<p>enableGitInfoでコミット時の情報を使う機能が機能しなかった。</p>
<p>原因はaction@checkoutが <code>--depth 1</code> を使ってfetchしていたため。Hugoから見たら最新のコミットの日時しかないように見えてしまう。</p>
<p>対応としては、<code>fetch-depth: 0</code> で全部のコミットをとる必要があった。</p>
<div class="highlight"><pre class="chroma"><code class="language-yml" data-lang="yml"><span class="w">      </span>- <span class="k">uses</span><span class="p">:</span><span class="w"> </span>actions/checkout@v2<span class="w">
</span><span class="w">        </span><span class="k">with</span><span class="p">:</span><span class="w">
</span><span class="w">          </span><span class="k">submodules</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
</span><span class="w">          </span><span class="k">fetch-depth</span><span class="p">:</span><span class="w"> </span><span class="m">0</span><span class="w"> </span><span class="c"># for enableGitInfo</span><span class="w">
</span></code></pre></div><p>これ、チューニングオプションなんだから、デフォルトにするのやめてほしい。</p>
<p>追記: 気づいたらactions-hugoのREADME.mdに書かれてた(<a href="https://github.com/peaceiris/actions-hugo/commit/c55729fbd130889796da92d7859188dbbad0e32a">commit</a>)。これで詰まる人が減りますねえ。</p>
]]></content></item><item><title>PulumiでAzureのリソースを構成する</title><link>https://fukasawah.github.io/posts/2019/06/24/configure-azure-resources-with-pulumi/</link><pubDate>Mon, 24 Jun 2019 00:58:49 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/06/24/configure-azure-resources-with-pulumi/</guid><description>PulumiはIndrastracture as Codeを実現するソフトウェア。 Azure Resource Manager(Template)やTerraformで出来</description><content type="html"><![CDATA[<p><a href="https://pulumi.io/">Pulumi</a>はIndrastracture as Codeを実現するソフトウェア。
Azure Resource Manager(Template)やTerraformで出来ることと同じだが、特定の言語(JavaScript,TypeScript,Python)で記述できるのが強み。</p>
<p>Azure Resource Manager Templateに嫌気がさしつつ、terraformでやろうかな、と思っていたらPulumi見かけたのでクイックスタートを走ってみた。</p>
<h3 id="pulumiのインストール">Pulumiのインストール</h3>
<p>以下でOS毎のインストール方法が書かれている。</p>
<p><a href="https://pulumi.io/reference/install/">https://pulumi.io/reference/install/</a></p>
<p>Azureを使う場合はAzure CLI 2.0.x以上を入れておく。</p>
<p><a href="https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest">https://docs.microsoft.com/en-us/cli/azure/?view=azure-cli-latest</a></p>
<h3 id="ログイン">ログイン</h3>
<p>Pulumiは状態管理などをPulumiが提供しているサーバ上で行う。
terraformのようにS3ストレージにtfstateを上げて共有する代わりにこれらを使うが、ログインのためのアカウント作成が面倒なのと、状態ファイルを握られるのが何か嫌なので、今回は使わない事にする。</p>
<p>ローカルに用意することもできるので、今回はこれを使う。</p>
<pre><code>mkdir ~/quickstart
cd ~/quickstart
pulumi login &quot;file://~/quickstart&quot;
</code></pre><h3 id="プロジェクトを作る">プロジェクトを作る</h3>
<p>AzureのQuickStartを読みながら進める</p>
<p><a href="https://pulumi.io/quickstart/azure/install-pulumi/">https://pulumi.io/quickstart/azure/install-pulumi/</a></p>
<p>プロバイダはAzure、言語はTypeScriptでプロジェクトを作成する。
ローカルにログインしての作成なので、少し表示が違う。</p>
<pre><code>$ pulumi new azure-typescript
Created project 'quickstart'

Enter your passphrase to protect config/secrets: ********
Re-enter your passphrase to confirm: ********
Created stack 'dev'

Enter your passphrase to unlock config/secrets
    (set PULUMI_CONFIG_PASSPHRASE to remember): ********
Saved config

Installing dependencies...

...

added 163 packages from 190 contributors and audited 510 packages in 35.953s
found 0 vulnerabilities

Finished installing dependencies

Your new project is ready to go!

To perform an initial deployment, run 'pulumi up'
</code></pre><p>ローカルの場合はパスフレーズを使い暗号化を行う。これはプロジェクト毎に設定するようだ。
次に、プロジェクトを作成した後、<code>dev</code>というstackが作られる。stackというのは環境みたいなもので、しばしば開発者が確認で使う「Development(開発環境)」や、お客様が遊んで使う「staging(検証環境)」ユーザが実際に使う「production(本番環境)」と呼んだりするが、Pulumiではこれらを1つ1つを<strong>stack</strong>と呼んで分けている。
なので、プロジェクトの中には複数のstackがあり、stack毎に反映していくことになる。今回はデフォルトのstackとしてdevが作られたが、stackの操作はサブコマンドの<code>pulumi stack</code>で一通り操作できる。(<a href="https://pulumi.io/reference/stack/">doc</a>)</p>
<h3 id="pulumiのプログラムを書く">Pulumiのプログラムを書く</h3>
<p><code>index.ts</code>が実際のコードになる。デフォルトでリソースグループとストレージアカウントを作成するコードが用意されている。</p>
<p>少し改変する。</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">pulumi</span> <span class="nx">from</span> <span class="s2">&#34;@pulumi/pulumi&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">azure</span> <span class="nx">from</span> <span class="s2">&#34;@pulumi/azure&#34;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">PROJECT_NAME</span> <span class="o">=</span> <span class="s1">&#39;pulumi&#39;</span>

<span class="c1">// Create an Azure Resource Group
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">resourceGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">azure</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">ResourceGroup</span><span class="p">(</span><span class="sb">`rg-</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">location</span><span class="o">:</span> <span class="s2">&#34;JapanEast&#34;</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">// Create an Azure resource (Storage Account)
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">account</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">azure</span><span class="p">.</span><span class="nx">storage</span><span class="p">.</span><span class="nx">Account</span><span class="p">(</span><span class="sb">`storage</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">resourceGroupName</span>: <span class="kt">resourceGroup.name</span><span class="p">,</span>
    <span class="nx">location</span>: <span class="kt">resourceGroup.location</span><span class="p">,</span>
    <span class="nx">accountTier</span><span class="o">:</span> <span class="s2">&#34;Standard&#34;</span><span class="p">,</span>
    <span class="nx">accountReplicationType</span><span class="o">:</span> <span class="s2">&#34;LRS&#34;</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">// Export the connection string for the storage account
</span><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">connectionString</span> <span class="o">=</span> <span class="nx">account</span><span class="p">.</span><span class="nx">primaryConnectionString</span><span class="p">;</span>
</code></pre></div><h3 id="pulumi-upで反映する">Pulumi upで反映する</h3>
<pre><code>$ pulumi up
Enter your passphrase to unlock config/secrets
    (set PULUMI_CONFIG_PASSPHRASE to remember): ********
Previewing update (dev):

 +  pulumi:pulumi:Stack quickstart-dev create
 +  azure:core:ResourceGroup rg-pulumi create
 +  azure:storage:Account storagepulumi create

Resources:
    + 3 to create

Updating (dev):

 +  pulumi:pulumi:Stack quickstart-dev creating
 +  azure:core:ResourceGroup rg-pulumi creating
 +  azure:core:ResourceGroup rg-pulumi created
 +  azure:storage:Account storagepulumi creating
@ updating....
 +  azure:storage:Account storagepulumi created

Outputs:
    connectionString: &quot;DefaultEndpointsProtocol=https;AccountName=storagepulumi516909b7;AccountKey=********************/********************==;EndpointSuffix=core.windows.net&quot;

Resources:
    + 3 created

Duration: 29s

Permalink: file:///C:/Users/fukasawah/quickstart/.pulumi/stacks/dev.json
</code></pre><p>出来上がったが、実際に作られたリソース名は<code>rg-pulumided110d7</code>や<code>storagepulumi516909b7</code>という感じで後ろに8文字のサフィックスがくっつく形となった。これはPulumiが勝手につけているようだ。</p>
<p>storageはともかく、リソースグループは付けたくないと思うので、明示的に指定する方法を探る。</p>
<h3 id="リソース名を明示して変更を反映する">リソース名を明示して変更を反映する</h3>
<p>用意されているリソースには大抵nameプロパティがあり、これを明示的に設定すればよいらしい。</p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="c1">// Create an Azure Resource Group
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">resourceGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">azure</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">ResourceGroup</span><span class="p">(</span><span class="sb">`rg-</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="sb">`rg-</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="c1">// この行を追記
</span><span class="c1"></span>    <span class="nx">location</span><span class="o">:</span> <span class="s2">&#34;JapanEast&#34;</span><span class="p">,</span>
<span class="p">});</span>
</code></pre></div><p>Azureのリソースグループは通常名前変更ができないし、そもそも前のリソースの名前(<code>rg-pulumided110d7</code>)がわからなくなる。</p>
<p>しかしpulumiは前回実行後の状態を(現在は)ローカルで管理している。</p>
<p>今回は、使われなくなったリソースは削除し、再度新規作成する形で置き換わる。（この挙動は「IaCあるある」で既存のデータが吹っ飛ぶので注意が必要。）
また、リソースグループに紐づくストレージアカウントも作り直しになっている。（リソースグループの移動は出来るはずだが、Pulumiはそこまで面倒見てないらしい。）</p>
<pre><code>$ pulumi up
Previewing update (dev):

     Type                         Name            Plan        Info
     pulumi:pulumi:Stack          quickstart-dev
 +-   azure:core:ResourceGroup  rg-pulumi       replace     [diff: ~name]
 +-   azure:storage:Account     storagepulumi   replace     [diff: ~location,name,resourceGroupName]

Resources:
    +-2 to replace
    1 unchanged

Do you want to perform this update? yes
Updating (dev):

     Type                         Name            Status       Info
     pulumi:pulumi:Stack          quickstart-dev
 +-   azure:core:ResourceGroup  rg-pulumi       replaced     [diff: ~name]
 +-   azure:storage:Account     storagepulumi   replaced     [diff: ~name,resourceGroupName]

Outputs:
  ~ connectionString: &quot;DefaultEndpointsProtocol=https;AccountName=storagepulumi516909b7;AccountKey=********************/********************==;EndpointSuffix=core.windows.net&quot; =&gt; &quot;DefaultEndpointsProtocol=https;AccountName=storagepulumi77efe7b5;AccountKey=********************/********************==;EndpointSuffix=core.windows.net&quot;

Resources:
    +-2 replaced
    1 unchanged

Duration: 1m14s

Permalink: file:///C:/Users/fukasawah/quickstart/.pulumi/stacks/dev.json
</code></pre><h2 id="aciでnginxコンテナを立てる">ACIでnginxコンテナを立てる</h2>
<p>チュートリアルでは、ストレージアカウントを削除し、nginxのACI(Azure Container Instances)を立てる例に書き換えているので習う。</p>
<p><a href="https://pulumi.io/quickstart/azure/modify-program/">https://pulumi.io/quickstart/azure/modify-program/</a></p>
<div class="highlight"><pre class="chroma"><code class="language-ts" data-lang="ts"><span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">pulumi</span> <span class="nx">from</span> <span class="s2">&#34;@pulumi/pulumi&#34;</span><span class="p">;</span>
<span class="kr">import</span> <span class="o">*</span> <span class="kr">as</span> <span class="nx">azure</span> <span class="nx">from</span> <span class="s2">&#34;@pulumi/azure&#34;</span><span class="p">;</span>

<span class="kr">const</span> <span class="nx">PROJECT_NAME</span> <span class="o">=</span> <span class="s1">&#39;pulumi&#39;</span>

<span class="c1">// Create an Azure Resource Group
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">resourceGroup</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">azure</span><span class="p">.</span><span class="nx">core</span><span class="p">.</span><span class="nx">ResourceGroup</span><span class="p">(</span><span class="sb">`rg-</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">name</span><span class="o">:</span> <span class="sb">`rg-</span><span class="si">${</span><span class="nx">PROJECT_NAME</span><span class="si">}</span><span class="sb">`</span><span class="p">,</span>
    <span class="nx">location</span><span class="o">:</span> <span class="s2">&#34;JapanEast&#34;</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">// Create an Azure Container Group
</span><span class="c1"></span><span class="kr">const</span> <span class="nx">container</span> <span class="o">=</span> <span class="k">new</span> <span class="nx">azure</span><span class="p">.</span><span class="nx">containerservice</span><span class="p">.</span><span class="nx">Group</span><span class="p">(</span><span class="s2">&#34;aci-nginx&#34;</span><span class="p">,</span> <span class="p">{</span>
    <span class="nx">containers</span><span class="o">:</span> <span class="p">[{</span>
        <span class="nx">name</span><span class="o">:</span> <span class="s2">&#34;nginx&#34;</span><span class="p">,</span>
        <span class="nx">image</span><span class="o">:</span> <span class="s2">&#34;nginx&#34;</span><span class="p">,</span>
        <span class="nx">memory</span>: <span class="kt">1</span><span class="p">,</span>
        <span class="nx">cpu</span>: <span class="kt">1</span><span class="p">,</span>
        <span class="nx">ports</span><span class="o">:</span> <span class="p">[{</span>
            <span class="nx">port</span>: <span class="kt">80</span><span class="p">,</span>
            <span class="nx">protocol</span><span class="o">:</span> <span class="s2">&#34;TCP&#34;</span>
        <span class="p">}],</span>
    <span class="p">}],</span>
    <span class="nx">osType</span><span class="o">:</span> <span class="s2">&#34;Linux&#34;</span><span class="p">,</span>
    <span class="nx">resourceGroupName</span>: <span class="kt">resourceGroup.name</span><span class="p">,</span>
    <span class="nx">location</span>: <span class="kt">resourceGroup.location</span><span class="p">,</span>
<span class="p">});</span>

<span class="c1">// Export the public IP of the container
</span><span class="c1"></span><span class="kr">export</span> <span class="kr">const</span> <span class="nx">ip</span> <span class="o">=</span> <span class="nx">container</span><span class="p">.</span><span class="nx">ipAddress</span><span class="p">;</span>
</code></pre></div><p>その後、<code>pulumi up</code>すると、ストレージアカウントが消えて、ACIが作成されたことが分かる。</p>
<p>作成後、nginxにアクセスする。接続先のIPは以下のようにして取れる。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">curl <span class="k">$(</span>pulumi stack output ip<span class="k">)</span>
</code></pre></div><p><code>pulumi stack output ip</code>の<code>ip</code>はindex.tsでexportしている変数<code>ip</code>のことで、これを参照することが出来るらしい。便利。</p>
<h3 id="リソースの削除">リソースの削除</h3>
<pre><code>pulumi destroy
</code></pre><h3 id="次のステップ">次のステップ</h3>
<p>ドキュメントにはgithubのサンプルコードを案内している。</p>
<p><a href="https://pulumi.io/quickstart/azure/next-steps/">https://pulumi.io/quickstart/azure/next-steps/</a></p>
<p><a href="https://github.com/pulumi/examples">https://github.com/pulumi/examples</a></p>
<p>他のクラウドと比べると少し少ないが、Azureのサンプルがいくつか載っている。書き方の参考になるかもしれない。</p>
<h2 id="感想">感想</h2>
<p>TypeScriptとVSCodeの書き味が最高だった。TypeScriptのモジュールシステムを使えるはずなので、共通化もしやすそう。</p>
<p>欠点は後発なのでまだまだプラクティスが少ないこと。公式がサポートに入っていないのでリソースの追加・修正があった時に追従するのが遅いだろう、という所かな。</p>
<p>ただ後者は<a href="https://pulumi.io/reference/pkg/nodejs/pulumi/azure/core/#TemplateDeployment">TemplateDeployment</a>リソースがあるので、部分的にARM Templateでカバーできそうだ。ちゃんとoutputも扱える。</p>
<h2 id="その他">その他</h2>
<h3 id="バックエンドは他にないのか">バックエンドは他にないのか？</h3>
<p>ローカルは何かイマイチ（git反映忘れそう）だし、PulumiのWebサーバに依存したくないなぁ、と思っていた。
そこで他のバックエンドを使えないか調べたところ、一応AWS,GCP,Azureをサポートしているようだ。</p>
<p>内部的にはgo-cloudで抽象化しているので、<a href="https://gocloud.dev/howto/blob/open-bucket/">go-cloudのopenBucketのドキュメント</a>を見ると、どのような環境変数が必要かは分かる。</p>
<p>細かいところは「<a href="https://qiita.com/fukasawah/items/7c793ab8b08d19cd9376">Qiita - Pulumiの状態管理にクラウドストレージバックエンドを使う</a>」に書いた。</p>
]]></content></item><item><title>MCP資格のAZ-103に不合格しました</title><link>https://fukasawah.github.io/posts/2019/05/25/fail-an-examination-az-103/</link><pubDate>Sat, 25 May 2019 14:20:19 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/05/25/fail-an-examination-az-103/</guid><description>700点で合格、結果530点でダメでした。かすりもしねえ・・・ 気になってたことがわかったり、問題形式とかわかったのでメモしておく。あと考えて</description><content type="html"><![CDATA[<p>700点で合格、結果530点でダメでした。かすりもしねえ・・・</p>
<p>気になってたことがわかったり、問題形式とかわかったのでメモしておく。あと考えてる対策も・・・</p>
<p>問題内容はほとんどないです。書こうにも<a href="https://www.microsoft.com/ja-jp/learning/certification-exam-policies.aspx">ポリシーの秘密保持契約</a>に引っかかりそうなのでビビってる。</p>
<blockquote>
<p>1 . 守秘義務</p>
<p>(中略)</p>
<p>試験の質問、解答、内容、計算、図表、図面またはワークシートを含む、試験または試験に関連する情報（「試験関連情報」）の開示は固く禁じられています</p>
</blockquote>
<p>そもそも、厳密に覚えてないので書こうにも書きづらい。</p>
<h2 id="受験までに気になっていたこと">受験までに気になっていたこと</h2>
<h3 id="試験の流れ">試験の流れ</h3>
<ul>
<li>入場（新宿駅南口付近の某所。開始15分よりも前でも入場できた）</li>
<li>受付にいき名乗る。身分証も提示。</li>
<li>説明が始まり、注意事項と同意書を書く</li>
<li>同意書を提出し、準備が出来たら所定の場所に向かうよう指示される（この後は少し自由）</li>
<li>電話の電源を切り、荷物をロッカーに預ける</li>
<li>トイレなどを済ませる</li>
<li>所定の場所に向かい、受験中の説明を聞く</li>
<li>PCが置いてある席に案内される</li>
<li>PCで受験を受ける</li>
<li>一通り問題に答えると合否の結果が出る。結果の画面は印刷してもらえる</li>
<li>その後「試験を終了」ボタンを押して退出</li>
<li>退出の受付と結果の画面の写しをもらう</li>
<li>お疲れ様でした</li>
</ul>
<p>なお、結果は点数のみでどこが間違えたかは教えてくれないが、こんな感じでどの分野が良かったか/悪かったかは教えてくれる。</p>
<p>こちらは全般的にダメでID周りが壊滅的な例です。誰か教えてくれ。</p>
<p>
    <img src="/images/2019/fail-an-examination-az-103/result.jpg"   loading="lazy"/></p>
<h3 id="問題の言語について">問題の言語について</h3>
<p>日本語で翻訳も怪しい所はあまりなかった。</p>
<p>WebAppをWebアプリと訳していたりちょっと残念なところはあったが、Microsoftのドキュメントを日本語で日常的に読んでいれば補完が利くので違和感はないと思う。</p>
<h3 id="試験時間について">試験時間について</h3>
<p>180分。メールでは210分と書かれていたが30分は説明などの時間に使われる。</p>
<p>時間配分については自分で決められるが、後述するとおり、前の問題に戻れない点に注意する。</p>
<h3 id="身分証について">身分証について</h3>
<p>メールでも記載があったが、身分を証明するものが２つ必要。
今回は運転免許証とパスポートを持っていった。</p>
<p>入場する運転免許証とパスポートはどちらかだけでもよくて、他にも保険証でも良いらしい。
要は顔写真と名前が一致する公式なものと、名前が一致する公式なものを２つ組み合わせれば良いらしい。</p>
<h3 id="持ち物について">持ち物について</h3>
<p>持ち込めない荷物はロッカーがあるので預けることができた。
（ちょっとした手荷物やジャケットは入るが、旅行鞄などは無理なサイズ感）</p>
<p>試験は席に案内されて受けることになるが、身分証1つ以外の私物は一切持ち込めない。</p>
<p>ただ、ロッカーの鍵、ホワイトボード、ペンが貸与されるので、これは持ち込むことができる。</p>
<p>ホワイトボードとペンは構成図を書くときなど、問題のイメージをつかむために使うものらしい。これは後で退出時に帰す事になる。お持ち帰りできない。</p>
<h3 id="受験時間は余裕があるかないか">受験時間は余裕があるか・ないか</h3>
<p>構成図を書いたりじっくり考えたりしたとこもあったが、それでも180分のうち90分も余らせたので余裕は十分ある。不合格だったんですけどね。</p>
<p>前の設問に戻れない形式なので、その間で見直しを入れるぐらいはやって良いかな。（進捗を見ながらですが）</p>
<h2 id="出題形式">出題形式</h2>
<p>すべて選択式だった。具体的にどんな感じかは公式が動画付きで出している。
受験時の画面もこのままだった（おそらく模擬試験の動画なので、実際とは細かい違いはあるけど。）</p>
<p><a href="https://www.microsoft.com/ja-jp/learning/certification-exams.aspx#meo-section4">マイクロソフト認定資格試験 - 試験形式および質問のタイプ</a></p>
<p>この動画の中で実際に見たのは以下。</p>
<ul>
<li>最適解問題 (1問1回答)</li>
<li>リストの作成 (1問・複数回答・順序有り)</li>
<li>複数の選択 (1問・複数回答・順序無し)</li>
<li>事例 (ケーススタディ)</li>
</ul>
<p>注意したいのは、問題の見直し・修正が出来なくなるタイミングがいくつかあること。
一応ちゃんと警告と確認があるので早々困らないと思う。</p>
<ul>
<li>いくつかブロックがあり、その1ブロックの中に4問～30問ぐらいの問題がある。4～5ブロックあって合計47問とかそんな感じ。で、ブロックをまたぐと前のブロックの見直し・修正が出来なくなる。</li>
<li>1つの問題に対して、質問が1つ提示され、これを何度かyes/noを答え続ける問題があり、これも前に戻れない。noって答えたけどやっぱりyesだった！となっても戻れない。</li>
</ul>
<p>全体の進捗（n問m問）と残り時間は常時表示されるが、どういう問題構成か事前に知る事はできない。</p>
<p>1問1答が大半で、1問あたり長くても5分で答えを出せるはずなので、時間的にはかなり余裕が出来るはず。
でも足りないよりは余ったほうが良いので、気持ち余裕を持つぐらいで良いと思う。
（ウェビナーでは時間が足りない的な事を言われたが、私は90分ぐらい余らせた。次回は1回は全部見直しを入れるぐらいはすると思う。）</p>
<p>ウェビナーでは「実際に操作する」みたいな話を聞いていたが、そういう問題はAZ-103にはなかったように見える。点数が少なすぎて足切りされたかもしれないけど。</p>
<h2 id="問題内容">問題内容</h2>
<p>上記のとおり書かないようにする。本当に幅広い範囲で出るとしか言えない。</p>
<p>個人的には<a href="https://www.microsoft.com/ja-jp/learning/exam-az-103.aspx">試験ページのスキルの評価（Skills measured）</a>から汲み取るのはかなり難しい。</p>
<p>「○○を実現したい。次の中から選べ」という感じがほとんどで、実現する方法についてわからないとまず答えられない。</p>
<p>でも納得がいかない部分があるので少し書くと、おそらくネットワークの「有効なセキュリティルールを評価する」の範疇でAzure Network Watcherの問題とか出てくるし、VMの「データディスクの追加」でデータディスクを他のVMに付け替える問題が出てくる。前者は知らんかっただけだけど、後者はレアケースな作業でしょうに。</p>
<h2 id="対策">対策</h2>
<p>結果のレポートにかかれているが、苦手分野がわかるのでそこを重点的にやっていきましょうという感じ。</p>
<p>要約すると、大人しく高い金をだして問題集を買い、苦手分野を重点的に解いて、知らんことにぶつかったら調べて手を動かして覚える、が良い気がしている。時間をめちゃくちゃ使うだろうけど。</p>
<p>今回取り組んだ勉強法としては以下。それ以外の方法を知らなかった。</p>
<ul>
<li>試験の<a href="https://www.microsoft.com/en-us/learning/exam-AZ-103.aspx">Skills measured</a>を見て単語を拾ってドキュメントを漁る</li>
<li><a href="https://docs.microsoft.com/ja-jp/learn/azure/">Microsoft LearnのAzure</a>で範囲に含まれていそうなところを進める</li>
<li>AZ体系になる前の問題集が会社にあったので読む</li>
</ul>
<p>受験して思ったのは、Skills measuredにある内容から試験を想像するのはまず無理だったということ。</p>
<p>ドキュメントは単一の機能の説明がほとんどで実運用時の事はあまり書かれてない。（ドキュメントなのでそりゃそうなんだけど、問題に出てくるような内容はもっと奥深くにある。だから普通に探したら見つからないし読まない。）</p>
<p>Learnで学べる内容はサービスの綺麗な部分を切り取ってる内容なので試験対策には弱すぎる。Azureに慣れさせる意味では良いかもしれない。</p>
<p>「AZ体系になる前の問題集」はクソみたいな翻訳、解説無し（もしくは翻訳されてない）、明らかに答え違うよね？という問題があったりするが、試験に即した問題造りになっており、試験対策には優秀だと思う。あと2問ほど問題集通りの内容が出てきたものもあった。最近のならもう少し良いかもしれない。</p>
<p>という感じで、問題集はちょっと効果あったなーという感じだった。</p>
<p>「こんだけ範囲が広いんだし、1個ぐらい犠牲にしてもええやろ」というふうに考えててID管理周りは少し削ってたけど、問題の割合を見ると少なくなかったし、出題割合あんま参考にならんな・・・という感じだった。</p>
<p>あと少しズレますが、一般的な概念の問題や用語はもちろん、Azureの用語の説明は全く出てこない。問題文にある「ブレード」とか何だよ、と思ったら、Portal上でリソースを選んだりしたときに出てくる左側のメニューのことらしい、というのを試験中に知ったとか。まぁそんな感じのレベルなんで落ちたんでしょう。</p>
<p><a href="https://docs.microsoft.com/ja-jp/azure/architecture/">アーキテクチャセンター</a>はちょっと見落としてたが、今風のアーキテクチャの話しかないので多分役に立たない気がする。でもAD回りは読んでも良いかもしれない。（後で読む）</p>
<h2 id="感想">感想</h2>
<p>勉強不足でした。</p>
<p>ちなみに普段からAzureを触ってないというわけではなく、必要に応じてAzure CLIを使った手順書を書いたり、ARM Templateを書いたりする程度にはやってます。まぁAzure様からしたら「お前のそれはお遊びだ」というわけですね。</p>
<p>試験は単純に知らなくて「そういう事も出来るのか！」というのはかなり多くあった。
逆を言えば「そんなこと覚えている必要ある？」という内容でもある。</p>
<p>あとExpressRouteの問題は辛い。そんな高価なもん気軽にハンズオンできるわけないだろ！いい加減にしろ！</p>
<p>愚痴ばかりになってしまった。正直もう受けたくないがお仕事だからね・・・</p>
]]></content></item><item><title>JJUG CCC 2019 Spring いってきた</title><link>https://fukasawah.github.io/posts/2019/05/18/report-jjug-ccc-2019-spring/</link><pubDate>Sat, 18 May 2019 20:36:00 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/05/18/report-jjug-ccc-2019-spring/</guid><description>いってきました。 [English] DevOps without Measurement is a Fail (Erno Venäläinen) @venalainene 英語聞き取れないマンだけど英語のセッションを選んだ。 スライドと話している雰囲気で理解</description><content type="html"><![CDATA[<p>いってきました。</p>
<h3 id="english-devops-without-measurement-is-a-fail-erno-venäläinen-venalainenehttpstwittercomvenalainene">[English] DevOps without Measurement is a Fail (Erno Venäläinen) <a href="https://twitter.com/venalainene">@venalainene</a></h3>
<p>英語聞き取れないマンだけど英語のセッションを選んだ。
スライドと話している雰囲気で理解しようとしたが、ま－無理だった。</p>
<p>これを選んだ理由はDevOpsは計測が無いと失敗するという強いお言葉だったので、じゃあ何を見てるのかとか気になった。なおDevOpsの理解はそこまで無い状態。</p>
<p>とりあえずこの辺り。多分もっとある</p>
<ul>
<li>Shift Leftの考え方</li>
<li>DevOpsをうまく進めるための5つのDriver
<ul>
<li>多分ここの話の内容に聞こえた。https://newrelic.com/resource/how-to-measure-the-success-of-devops</li>
</ul>
</li>
<li>監視のアンチパターン</li>
<li>監視のデザインパターン</li>
</ul>
<p>監視の(アンチ|デザイン)パターンについては、<a href="https://www.oreilly.co.jp/books/9784873118642/">入門 監視</a> で触れているような内容だったと思う。良い本だぁ・・・</p>
<p>そんな感じで単語しかわからずよく分からなかったので、スライドが出たら(機械)翻訳して読み直したい所</p>
<h3 id="テストエンジニアが教える-junitを書き始める前に考えるべきテスト-風間裕也-nihonbusonhttpstwittercomnihonbuson">テストエンジニアが教える JUnitを書き始める前に考えるべきテスト (風間裕也) <a href="https://twitter.com/nihonbuson">@nihonbuson</a></h3>
<p>Slide: <a href="https://speakerdeck.com/nihonbuson/jjug-ccc-2019-spring">https://speakerdeck.com/nihonbuson/jjug-ccc-2019-spring</a></p>
<p>開発者は（テストの文脈で）どんなことをすればよいかの話。軽いワークもあった。テスト技法は境界値分析のみの紹介。</p>
<p><a href="http://jstqb.jp/dl/JSTQB-SyllabusFoundation_Version2011.J02.pdf#page=15">テストの7原則</a> はソフトウェア開発に関わる人の共通認識にしたいですね・・・</p>
<p>コーディング前からテストの内容を話すことですれ違いを無くす話は納得感がある。結構思い込みでみんないい感じにやってくれると思いがち。ちゃんと言葉なり図なりで共有すると「そういえば」という気づきがあったりする。</p>
<p>あとテストケースについて理由を説明させるのはよいですね。どういう観点のテストか理解しやすくなり、抜け漏れの観点も絞れる。テスト名にも使える。いいですね。</p>
<p>おまけが本編。</p>
<p>QAチーム何するの？開発者がしっかりテスト出来てるならQAエンジニアいらなくね？という質問が過去にあったそうで、その答えとしては「<strong>QAはCheckingではなくTestingを行いたい</strong>（だから要る）」という話。他のエンジニアのBlogの引用もあった。</p>
<p>開発者が行うテスト（バリデーション、状態遷移とかの仕様が決まったものに対するテスト）はCheckingであり、そうでない部分（全体を通して明らかになっていなさそうな部分を組み合わせを見つけて挙動を見るテスト）を考えて行うのがTestingとなる。という理解。これ、かなり自分の中で納得感があった。システムテストを結合試験の焼き回しになりがちな所があったりするが、本当の操作で正常に通るのはもちろん、何か変な事が出来ないかを考えるきっかけはこのタイミングしかできない。</p>
<h3 id="ソフトウェア設計の教育工学的な分析と育成へのアイデア松下正嗣-masatsugumatsushttpstwittercommasatsugumatsus">ソフトウェア設計の教育工学的な分析と育成へのアイデア(松下正嗣) <a href="https://twitter.com/masatsugumatsus">@masatsugumatsus</a></h3>
<p>Slide: <a href="https://speakerdeck.com/deffence1776/jjug-2019-spring-fa-biao-zi-liao-sohutoueashe-ji-falsejiao-yu-gong-xue-de-nafen-xi-toyu-cheng-hefalseaidea">https://speakerdeck.com/deffence1776/jjug-2019-spring-fa-biao-zi-liao-sohutoueashe-ji-falsejiao-yu-gong-xue-de-nafen-xi-toyu-cheng-hefalseaidea</a></p>
<p>思考実験レベルで実用レベルではないというお断りをしてた。中盤以降、時間が少なく駆け足になってた。(20分枠だったけどスライドを見ると40分枠で話そうとしてたように感じる)</p>
<p>過去に新人教育的な事をやったので。後のセッションでも教育的な話を聞きに行ったけど、こちらは抽象的な話と理解している。</p>
<p>設計スキルについて「研修で教えるの、正直難しい。センスや好み？」という問題提起があり、同じ問題を感じてるなぁ、と共感を持ってた。ただ「センス」で片付けたくないという思いはあった。</p>
<p>そこで出てきた「インストラクショナルデザイン」という手法の話が良かった。漠然と探すよりはよっぽど良刺そうな感じは話を聞いてても思った。</p>
<p>それ以降は私には難しかった・・・スライド見ながら勉強します。</p>
<h3 id="スキマ分野で生き残るための戦略すずきただし-tada_suzuhttpstwittercomtada_suzu">スキマ分野で生き残るための戦略(すずきただし) <a href="https://twitter.com/tada_suzu">@tada_suzu</a></h3>
<p>Slide: <a href="https://docs.google.com/presentation/d/1JN4hbvTe89G6pwlIndrC3192kh2XKrt51Yjc5Ievt4M/edit#slide=id.p">https://docs.google.com/presentation/d/1JN4hbvTe89G6pwlIndrC3192kh2XKrt51Yjc5Ievt4M/edit#slide=id.p</a></p>
<p>完璧な開発現場はないからそのスキマを探して良くしていく戦略を取るとそれが評価や立ち位置に繋がり良いという話。</p>
<p>まとめのほうで「自分が動きやすい位置を見つけて、あまり苦しまない開発人生を！」と話してて、本当にこれが大事だよなぁ、というのを感じてる。仕事が全部ではないけど、仕事はかなり人生の割を食うわけだし、苦しむのは損。</p>
<p>ただ、今までやってなかったというのは、逆を返せば今までそれでやっていけていたので、その変化に価値を見出す人が上に居るかどうか、というのはあるんじゃないかなぁ。
最近は仕事の楽しさがわからなくなっている。客は求めてないけど自分の興味があるツールやライブラリをぶち込みたい衝動があるけど。</p>
<h3 id="jjug会長と一緒に考えたspring-boot-x-javascript-x-intellij-x-アジャイルというモダンな新人研修を今まさにやっている話-株式会社カサレアル-suke_masahttpstwittercomsuke_masa-zer0_uhttpstwittercomzer0_u">JJUG会長と一緒に考えたSpring Boot x JavaScript x IntelliJ x アジャイルというモダンな新人研修を今まさにやっている話 (株式会社カサレアル) <a href="https://twitter.com/suke_masa">@suke_masa</a> <a href="https://twitter.com/zer0_u">@zer0_u</a></h3>
<p>Slide: <a href="https://speakerdeck.com/masatoshitada/modern-new-employees-training-spring-boot-javascript-intellij-agile">https://speakerdeck.com/masatoshitada/modern-new-employees-training-spring-boot-javascript-intellij-agile</a></p>
<p>上記のとおり、新人教育的な事をやったのでその延長で。こちらは実際の研修の進め方など具体的な話。
15年(おそらく20年)同じ受動的なカリキュラムで、主体的に取り組めてモダンなカリキュラム（タイトル通り）に刷新したとのこと。去年から取り組んでいるらしい（今年はjQueryからReact+SPAにしたぐらいらしい？）</p>
<p>Gitは開発研修初日からいれてて、GitLabを使いコード管理とCI、Docker環境を疑似クラウドに見立ててデプロイという感じ。演習はSprintも取り入れて約2ヵ月で。
Servletを捨ててSpring Bootでやったが、多少整理がをしたものの実務上は問題がなかったらしい。</p>
<p>質問もいくつか上がってて、「未経験の人はいたか」は「少数だけど居た」とか「研修を進めて技術レベルに差が出てきたときに一緒に進めるのが辛い」という点は「出来る子は出来ない子のフォローをすることで、出来る子はより深く理解でき、出来ない子は出来るようになる」というふうに進めたとか。</p>
<p>ただ、企業様によってこのカリキュラムは合う合わないがあるとのこと。
現場によるからうちはそんなもん(Spring Boot等)ないからもっと汎用的な技術(Servlet等)のほうがーって言う感じなんだと思う。両方やるってなると2か月じゃ全然足りないんだよなぁ。</p>
<p>どこも同じだなぁ。</p>
<h3 id="マイクロサービス４つの分割アプローチの比較増田亨-masuda220httpstwittercommasuda220">マイクロサービス：４つの分割アプローチの比較(増田　亨) <a href="https://twitter.com/masuda220">@masuda220</a></h3>
<p>Slide: <a href="https://www.slideshare.net/masuda220/ss-146325870">https://www.slideshare.net/masuda220/ss-146325870</a></p>
<p>難しかった（小並感）</p>
<p>疲れちゃったのでこの辺で。</p>
]]></content></item><item><title>Basic Authentication on Nginx</title><link>https://fukasawah.github.io/posts/2019/03/27/basic-authentication-on-nginx/</link><pubDate>Wed, 27 Mar 2019 02:08:03 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/03/27/basic-authentication-on-nginx/</guid><description>Apache Httpdのツールとして提供されているhtpasswdコマンドを使うのが良い。 （最初はpythonで自前で計算しようとしたが、思っていた以</description><content type="html"><![CDATA[<p>Apache Httpdのツールとして提供されている<code>htpasswd</code>コマンドを使うのが良い。
（最初はpythonで自前で計算しようとしたが、<a href="https://svn.apache.org/viewvc/apr/apr/trunk/crypto/">思っていた以上に面倒だった</a>ので諦めた&hellip;）</p>
<pre><code>yum install httpd-tools
</code></pre><p><code>htpasswd</code>の利用法は以下のドキュメント。</p>
<p><a href="https://httpd.apache.org/docs/2.4/misc/password_encryptions.html">https://httpd.apache.org/docs/2.4/misc/password_encryptions.html</a></p>
<p>こんな感じに作る。新規作成時は<code>-c</code>をつける</p>
<pre><code>$ sudo htpasswd -c -m /etc/nginx/.htpasswd testuser
New password:
Re-type new password:
Adding password for user testuser
</code></pre><p>ただ、出来上がるファイルは誰でも読める状態になっており、nginxユーザ(グループ)から読める必要があるため、<code>644</code>から<code>640</code>に変え、グループを<code>nginx</code>に変更する。</p>
<pre><code>sudo chmod 0640 /etc/nginx/.htpasswd
sudo chown :nginx /etc/nginx/.htpasswd
</code></pre><p>最後にnginx.confの設定を変える。設定のドキュメントは以下。</p>
<p><a href="https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html">https://nginx.org/en/docs/http/ngx_http_auth_basic_module.html</a></p>
<p>以下をhttp,server,locationのいずれかのディレクティブに追加する。
locationなら特定のpathなら認証不要といった事ができる。</p>
<pre><code>    auth_basic           &quot;need authenticate&quot;;
    auth_basic_user_file /etc/nginx/.htpasswd;
</code></pre><p>後はnginxをreloadして反映。</p>
]]></content></item><item><title>NginxのVirtualhost設定～WildcardSSL証明書を添えて～</title><link>https://fukasawah.github.io/posts/2019/03/26/virtualhost-nginx-with-wildcard-ssl/</link><pubDate>Tue, 26 Mar 2019 04:10:14 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/03/26/virtualhost-nginx-with-wildcard-ssl/</guid><description>以前の手順でWildcardなSSL証明書ができたので、これを使ってvirtualhost運用をしてみたい。 ただ、このとき、証明書の設定箇所</description><content type="html"><![CDATA[<p>以前の手順でWildcardなSSL証明書ができたので、これを使ってvirtualhost運用をしてみたい。</p>
<p>ただ、このとき、証明書の設定箇所は1か所にしたい（増やすときに面倒なので）</p>
<p>まさしくな手順はnginxのドキュメントにある。</p>
<p><a href="https://nginx.org/en/docs/http/configuring_https_servers.html#certificate_with_several_names">https://nginx.org/en/docs/http/configuring_https_servers.html#certificate_with_several_names</a></p>
<h3 id="etcnginxnginxconfの修正"><code>/etc/nginx/nginx.conf</code>の修正</h3>
<p>/etc/nginx/nginx.confのSSLの設定を、<code>server</code>ディレクティブではなく、<strong><code>http</code>ディレクティブに移動する。</strong></p>
<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx">   <span class="c1"># certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
</span><span class="c1"></span>    <span class="k">ssl_certificate</span> <span class="s">/etc/letsencrypt/live/fukasawah.dev/fullchain.pem</span><span class="p">;</span>
    <span class="k">ssl_certificate_key</span> <span class="s">/etc/letsencrypt/live/fukasawah.dev/privkey.pem</span><span class="p">;</span>
    <span class="k">ssl_session_timeout</span> <span class="s">1d</span><span class="p">;</span>
    <span class="k">ssl_session_cache</span> <span class="s">shared:SSL:50m</span><span class="p">;</span>
    <span class="k">ssl_session_tickets</span> <span class="no">off</span><span class="p">;</span>
        <span class="c1"># modern configuration. tweak to your needs.
</span><span class="c1"></span>    <span class="k">ssl_protocols</span> <span class="s">TLSv1.2</span><span class="p">;</span>
    <span class="k">ssl_ciphers</span> <span class="s">&#39;ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256&#39;</span><span class="p">;</span>
    <span class="k">ssl_prefer_server_ciphers</span> <span class="no">on</span><span class="p">;</span>

    <span class="c1"># HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
</span><span class="c1"></span>    <span class="k">add_header</span> <span class="s">Strict-Transport-Security</span> <span class="s">max-age=15768000</span><span class="p">;</span>

    <span class="c1"># OCSP Stapling ---
</span><span class="c1"></span>    <span class="c1"># fetch OCSP records from URL in ssl_certificate and cache them
</span><span class="c1"></span>    <span class="k">ssl_stapling</span> <span class="no">on</span><span class="p">;</span>
    <span class="k">ssl_stapling_verify</span> <span class="no">on</span><span class="p">;</span>

    <span class="c1">## verify chain of trust of OCSP response using Root CA and Intermediate certs
</span><span class="c1"></span>    <span class="k">ssl_trusted_certificate</span> <span class="s">/etc/letsencrypt/live/fukasawah.dev/chain.pem</span><span class="p">;</span>
</code></pre></div><p>次にserver_nameをちゃんと与える。</p>
<pre><code>    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        server_name  fukasawah.dev; # &lt;= ここ！
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }
    # 省略
</code></pre><h3 id="etcnginxconfdvirtualhost-testconf-を作成する"><code>/etc/nginx/conf.d/virtualhost-test.conf</code> を作成する</h3>
<p>httpディレクティブにある<code>include /etc/nginx/conf.d/*.conf</code>の設定で読むだけなので、<code>.conf</code>で終われば何でも良い。<code>virtualhost-サブドメイン名.conf</code>がわかりやすいんじゃないでしょうか。</p>
<div class="highlight"><pre class="chroma"><code class="language-nginx" data-lang="nginx"><span class="k">server</span> <span class="p">{</span>
    <span class="kn">listen</span> <span class="mi">443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>
    <span class="kn">listen</span> <span class="s">[::]:443</span> <span class="s">ssl</span> <span class="s">http2</span><span class="p">;</span>

    <span class="kn">server_name</span> <span class="s">test.fukasawah.dev</span><span class="p">;</span> <span class="c1"># server_nameをちゃんと変える
</span><span class="c1"></span>
    <span class="kn">root</span> <span class="s">/usr/share/nginx/html/test</span><span class="p">;</span> <span class="c1"># 試しにテスト用のディレクトリをrootにする
</span><span class="c1"></span>    <span class="kn">index</span> <span class="s">index.html</span><span class="p">;</span>
<span class="p">}</span>
</code></pre></div><p>見ての通り、SSLの設定はないが、同じhttpディレクティブに存在するserverディレクティブなので、httpディレクティブで設定したSSL設定が引き継がれている。これで追加するときも楽になる。</p>
<p>動作確認用にテスト用のファイルを配置する。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo mkdir -p /usr/share/nginx/html/test
sudo tee /usr/share/nginx/html/test/index.html <span class="s">&lt;&lt; __EOF__
</span><span class="s">&lt;!DOCTYPE html&gt;
</span><span class="s">&lt;body&gt;
</span><span class="s">  &lt;p&gt;Hello World&lt;/p&gt;
</span><span class="s">&lt;/body&gt;
</span><span class="s">__EOF__</span>
</code></pre></div><h3 id="サーバに設定を反映">サーバに設定を反映</h3>
<pre><code>sudo systemctl reload nginx
</code></pre><p><a href="https://fukasawah.dev">https://fukasawah.dev</a> と <a href="http://test.fukasawah.dev">http://test.fukasawah.dev</a> で見え方が変わっていることを確認する。（同じHTMLが返ってきていないこと）</p>
<p>また証明書も確認して同じものを使っていることも確認しておく。</p>
<p>以上。</p>
<p>あと内々で公開するとき用に、Digest認証をかけたい所だが、標準ではないモジュールなのでちょっと手間そう。Basic認証で妥協しようかな。TLSの上で通信されてるから大丈夫だ！大丈夫！</p>
<p>どうでもよいが、SSL証明書はもはやTLS証明書である・・・。</p>
]]></content></item><item><title>Install PostgreSQL 11 on CentOS 7</title><link>https://fukasawah.github.io/posts/2019/03/26/install-postgresql-11-on-centos7/</link><pubDate>Tue, 26 Mar 2019 03:23:23 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/03/26/install-postgresql-11-on-centos7/</guid><description>PostgreSQL 11の導入 pg_bigmの導入 最新版はPostgreSQLのページから得られるリポジトリからインストールできる。 https://yum.postgresql.org/repopackages.php#pg11 PostgreSQL 11の導入 リポジトリの</description><content type="html"><![CDATA[<ul>
<li>PostgreSQL 11の導入</li>
<li>pg_bigmの導入</li>
</ul>
<p>最新版はPostgreSQLのページから得られるリポジトリからインストールできる。</p>
<p><a href="https://yum.postgresql.org/repopackages.php#pg11">https://yum.postgresql.org/repopackages.php#pg11</a></p>
<h2 id="postgresql-11の導入">PostgreSQL 11の導入</h2>
<h3 id="リポジトリの登録とインストール">リポジトリの登録とインストール</h3>
<pre><code># リポジトリ追加
sudo yum install https://download.postgresql.org/pub/repos/yum/11/redhat/rhel-7-x86_64/pgdg-centos11-11-2.noarch.rpm

# クライアントとサーバと拡張機能のインストール
sudo yum install -y postgresql11 postgresql11-server postgresql11-contrib 
</code></pre><p><code>/usr/pgsql-11</code>辺りに色々導入される</p>
<h3 id="データベースの領域作成">データベースの領域作成</h3>
<pre><code>sudo /usr/pgsql-11/bin/initdb --encoding=UTF-8 --no-locale -D /var/lib/pgsql/11/data
</code></pre><h3 id="サーバ起動">サーバ起動</h3>
<pre><code># 起動
sudo systemctl start postgresql-11

# 自動起動の有効化
sudo systemctl enable postgresql-11

# 確認
sudo systemctl status postgresql-11
</code></pre><p>statusで確認すると、<code>active (running) </code>になっていたり、<code>/var/lib/pgsql/11/data/</code>を使っていることが確認できる。</p>
<pre><code>● postgresql-11.service - PostgreSQL 11 database server
   Loaded: loaded (/usr/lib/systemd/system/postgresql-11.service; enabled; vendor preset: disabled)
   Active: active (running) since 火 2019-03-26 02:29:53 JST; 41s ago
     Docs: https://www.postgresql.org/docs/11/static/
 Main PID: 30183 (postmaster)
   CGroup: /system.slice/postgresql-11.service
           ├─30183 /usr/pgsql-11/bin/postmaster -D /var/lib/pgsql/11/data/
           ...
</code></pre><h2 id="pg_bigmの導入">pg_bigmの導入</h2>
<p>1~2文字に強い全文検索の機能拡張。</p>
<p><a href="http://pgbigm.osdn.jp/">http://pgbigm.osdn.jp/</a></p>
<p>CentOS7 + PostgreSQL 11向けのバイナリは配布されていないので、ソースコードからビルドして導入する。</p>
<h3 id="依存ソフトウェアのインストール">依存ソフトウェアのインストール</h3>
<p>postgresqlのソースコードやビルド・インストール時に必要な依存を入手する</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ビルドに必要</span>
sudo yum install -y postgresql11-devel

<span class="c1"># llvm-toolset-7のパッケージがあるリポジトリ</span>
sudo yum install -y centos-release-scl
<span class="c1"># ビルドに必要(llvm)</span>
sudo yum install -y llvm-toolset-7 llvm5.0
</code></pre></div><p>llvm-toolset-7はビルド時に<code>/opt/rh/llvm-toolset-7/root/usr/bin/clang</code>を使うため、llvm5.0はinstall時に<code>/usr/lib64/llvm5.0/bin/llvm-lto</code>を使うため。</p>
<h3 id="ソースコードの入手">ソースコードの入手</h3>
<p>ソースコードをダウンロードして展開。
URLが存在しない場合、公式のダウンロードから適宜置き換える。</p>
<pre><code>mkdir src
cd src
curl -LO http://iij.dl.osdn.jp/pgbigm/66565/pg_bigm-1.2-20161011.tar.gz
tar xzvf pg_bigm-1.2-20161011.tar.gz
cd pg_bigm-1.2-20161011
</code></pre><h3 id="ビルドとインストール">ビルドとインストール</h3>
<p>この辺りは<a href="http://pgbigm.osdn.jp/pg_bigm-1-2.html">pg_bigmのドキュメント</a>に書かれている。</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash"><span class="c1"># ビルド</span>
make <span class="nv">USE_PGXS</span><span class="o">=</span><span class="m">1</span> <span class="nv">PG_CONFIG</span><span class="o">=</span>/usr/pgsql-11/bin/pg_config

<span class="c1"># install</span>
sudo make <span class="nv">USE_PGXS</span><span class="o">=</span><span class="m">1</span> <span class="nv">PG_CONFIG</span><span class="o">=</span>/usr/pgsql-11/bin/pg_config install
</code></pre></div><h3 id="postgresqlconfの修正">postgresql.confの修正</h3>
<pre><code>sudo vi /var/lib/pgsql/11/data/postgresql.conf

# 以下を足す
shared_preload_libraries = 'pg_bigm'
</code></pre><p>再起動</p>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo systemctl restart postgresql-11
</code></pre></div><h3 id="dbの作成とpsqlによるdbアクセス">DBの作成とpsqlによるDBアクセス</h3>
<div class="highlight"><pre class="chroma"><code class="language-bash" data-lang="bash">sudo -u postgres createdb --locale<span class="o">=</span>C --encoding<span class="o">=</span>UTF8 testdb
sudo -u postgres psql -d testdb
</code></pre></div><h3 id="拡張機能の有効化">拡張機能の有効化</h3>
<p><strong><code>CREATE EXTENSION pg_bigm;</code>はDatabase毎に行う必要がある点に注意</strong>。</p>
<pre><code>testdb=# CREATE EXTENSION pg_bigm;
CREATE EXTENSION

testdb=# \dx pg_bigm
                                 List of installed extensions
  Name   | Version | Schema |                           Description
---------+---------+--------+------------------------------------------------------------------
 pg_bigm | 1.2     | public | text similarity measurement and index searching based on bigrams
(1 row)
</code></pre><h3 id="テスト実行">テスト実行</h3>
<div class="highlight"><pre class="chroma"><code class="language-sql" data-lang="sql">
<span class="c1">-- テーブル作成
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">TABLE</span> <span class="n">pg_tools</span> <span class="p">(</span><span class="n">tool</span> <span class="nb">text</span><span class="p">,</span> <span class="n">description</span> <span class="nb">text</span><span class="p">);</span>

<span class="c1">-- レコード作成
</span><span class="c1"></span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">pg_tools</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;pg_hint_plan&#39;</span><span class="p">,</span> <span class="s1">&#39;PostgreSQLでHINT句を使えるようにするツール&#39;</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">pg_tools</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;pg_dbms_stats&#39;</span><span class="p">,</span> <span class="s1">&#39;PostgreSQLの統計情報を固定化するツール&#39;</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">pg_tools</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;pg_bigm&#39;</span><span class="p">,</span> <span class="s1">&#39;PostgreSQLで2-gramの全文検索を使えるようにするツール&#39;</span><span class="p">);</span>
<span class="k">INSERT</span> <span class="k">INTO</span> <span class="n">pg_tools</span> <span class="k">VALUES</span> <span class="p">(</span><span class="s1">&#39;pg_trgm&#39;</span><span class="p">,</span> <span class="s1">&#39;PostgreSQLで3-gramの全文検索を使えるようにするツール&#39;</span><span class="p">);</span>

<span class="c1">-- インデックス作成
</span><span class="c1"></span><span class="k">CREATE</span> <span class="k">INDEX</span> <span class="n">pg_tools_idx</span> <span class="k">ON</span> <span class="n">pg_tools</span> <span class="k">USING</span> <span class="n">gin</span> <span class="p">(</span><span class="n">description</span> <span class="n">gin_bigm_ops</span><span class="p">);</span>

<span class="c1">-- 全文検索 =&gt; 2件ヒットすること
</span><span class="c1"></span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">pg_tools</span> <span class="k">WHERE</span> <span class="n">description</span> <span class="k">LIKE</span> <span class="s1">&#39;%全文検索%&#39;</span><span class="p">;</span>

<span class="c1">-- テーブル削除
</span><span class="c1"></span><span class="k">DROP</span> <span class="k">TABLE</span> <span class="n">pg_tools</span><span class="p">;</span>
</code></pre></div>]]></content></item><item><title>VPS ServerのセットアップとLetsEncryptによる証明書取得と利用まで(Google Cloud DNS Service)</title><link>https://fukasawah.github.io/posts/2019/03/25/vps-server-setup-with-letsencrypt/</link><pubDate>Mon, 25 Mar 2019 02:16:16 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/03/25/vps-server-setup-with-letsencrypt/</guid><description>まずは入っているパッケージを適当に最新化 yum update reboot ユーザを作る # ユーザ作成 useradd fukasawah # パスワード設定 passwd fukasawah # wheelを与えてsudoを使えるようにする</description><content type="html"><![CDATA[<p>まずは入っているパッケージを適当に最新化</p>
<pre><code>yum update
reboot
</code></pre><p>ユーザを作る</p>
<pre><code># ユーザ作成
useradd fukasawah
# パスワード設定
passwd fukasawah

# wheelを与えてsudoを使えるようにする
usermod -G wheel fukasawah
id fukasawah

# 作成したユーザに変更
su - fukasawah

# sudoが使えるか確認。パスワード設定した時のパスワードが必要
sudo ls -l /
</code></pre><h3 id="ssh鍵の生成">SSH鍵の生成</h3>
<p>作成したユーザに対して行う。既に公開鍵の準備がある場合は、後述のauthorized_keysに追記する手順まで飛ばす。</p>
<pre><code>$ ssh-keygen -t rsa -b 4096
Generating public/private rsa key pair.
Enter file in which to save the key (/home/fukasawah/.ssh/id_rsa):
Created directory '/home/fukasawah/.ssh'.
Enter passphrase (empty for no passphrase):
Enter same passphrase again:
Your identification has been saved in /home/fukasawah/.ssh/id_rsa.
Your public key has been saved in /home/fukasawah/.ssh/id_rsa.pub.
The key fingerprint is:
1c:03:30:bb:05:59:23🇩🇪96:02:5a:5b:b2:48:c9:e9 fukasawah@ik1-309-14734.vs.sakura.ne.jp
The key's randomart image is:
+--[ RSA 4096]----+
|..* *++          |
|.B B.* +         |
|+ o + = o        |
| E   = . o       |
|    .   S        |
|                 |
|                 |
|                 |
|                 |
+-----------------+
</code></pre><p>信頼できる公開鍵として登録しておく</p>
<pre><code>cat .ssh/id_rsa.pub &gt;&gt; .ssh/authorized_keys
chmod 0600 .ssh/authorized_keys
</code></pre><p>秘密鍵はSSH接続時に必要になるので内容をコピーして手元に持ってきておく</p>
<pre><code>cat .ssh/id_rsa
</code></pre><p>表示された <code>-----BEGIN RSA PRIVATE KEY-----</code>から<code>-----END RSA PRIVATE KEY-----</code>までの間の内容が秘密鍵なので、これをSSH接続したい端末にコピーする。</p>
<p>以降は必要ないので削除しておく</p>
<h3 id="sshサーバのセキュリティを高める">SSHサーバのセキュリティを高める</h3>
<p>rootユーザで行う。</p>
<p>SSHサーバに以下の設定を施す。</p>
<ul>
<li>パスワード認証を無効（公開鍵認証）</li>
<li>rootのログイン無効（作成したユーザからsuでログインする）</li>
<li>空のパスワードログインを無効（必ずパスワード設定しないとログインできないようにする）</li>
</ul>
<pre><code>cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
vi /etc/ssh/sshd_config
</code></pre><p>diffでバックアップとの差分を出して以下のように変更されたことを確認</p>
<pre><code>#diff /etc/ssh/sshd_config.bak /etc/ssh/sshd_config
55c55
&lt; #PubkeyAuthentication yes
---
&gt; PubkeyAuthentication yes
78,79c78,79
&lt; #PermitEmptyPasswords no
&lt; PasswordAuthentication yes
---
&gt; PermitEmptyPasswords no
&gt; PasswordAuthentication no
</code></pre><pre><code>問題がなければsshdを再起動
systemctl restart sshd
</code></pre><p>以下を確認する</p>
<ul>
<li>root＋パスワード認証でログインできないこと</li>
<li>作成したユーザ＋パスワード認証でログインできないこと</li>
<li>作成したユーザ＋公開鍵認証でログインできること</li>
</ul>
<h3 id="ロケールとタイムゾーンの変更">ロケールとタイムゾーンの変更</h3>
<p>OS設定のロケールとタイムゾーンを日本に合わせる</p>
<pre><code># ロケールの確認
locale
# タイムゾーンの確認
date
</code></pre><p>以下のコマンドで変更する。</p>
<pre><code># ロケール変更
sudo localectl set-locale LANG=ja_JP.UTF-8

# タイムゾーン変更
sudo timedatectl set-timezone Asia/Tokyo
</code></pre><p>ロケールは再接続後に反映される。</p>
<pre><code># ロケールの確認
locale
# タイムゾーンの変更の確認
date
</code></pre><h2 id="lets-encryptでssl証明書を作る">Let&rsquo;s EncryptでSSL証明書を作る</h2>
<p>ドメインは Google Domainsで管理しており、ワイルドカード証明書を発行したい。</p>
<p>ワイルドカード証明書の場合、DNS-01認証が必須でありDNSサーバに対してTXTレコードを書き込む必要がある。
一般的なドメインレジストリ（お名前.com、Value-Domain等）でも手動で行えば可能ではあるが、90日の有効期間しかないため、この作業は自動化したい。</p>
<p>もちろん、スクレイピングなどを駆使すれば出来なくはないがデザイン変更などでスクレイピングプログラムが動かなくなるリスクも考えられる。そのあたりを考えると大変。
そこで、DNSをAPIで操作できるサービスを利用する。こちらならAPIが変わらない限り動かなくなることもなく、失敗時の動作もわかりやすい。</p>
<p>ただ、そのためには、ドメインレジストリで管理しているネームサーバではなく、サービス提供のネームサーバに転送し、解決させるようにする必要がある</p>
<p>今回はCoocle Cloud Platformで提供されているGoogle Cloud DNS Serviceを使う。ちなみに、Azure DNSでも同じ要領で出来る。
LetsEncryptによる証明書の作成・更新を行うためのプログラムには、certbot+certbot-dns-google プラグインを使う。</p>
<ul>
<li>Google Cloud DNS Serviceへゾーンを作成する</li>
<li>ネームサーバを変更(Google domains -&gt; Google Cloud DNS Service)</li>
<li>Google Cloud DNS Serviceの認可情報を作る</li>
</ul>
<h3 id="google-cloud-dns-serviceへゾーンを作成する">Google Cloud DNS Serviceへゾーンを作成する</h3>
<p><a href="https://cloud.google.com/dns/">https://cloud.google.com/dns/</a></p>
<p>ゾーンはドメインに対してDNSレコードを管理する単位で、1ドメインにつき1ゾーンを作ることになる。</p>
<p>以下を進めて、Google Cloud DNS Serviceを有効化にする。</p>
<p><a href="https://console.cloud.google.com/net-services/dns/zones">https://console.cloud.google.com/net-services/dns/zones</a></p>
<p>ゾーンを作成する。</p>
<ul>
<li>ゾーンタイプ: 公開</li>
<li>ゾーン名: 自由</li>
<li>DNS名: 取得したドメイン名</li>
<li>DNSSEC: オン</li>
</ul>
<p>
    <img src="/images/vps-server-setup-with-letsencrypt/2019-03-16-21-14-23.png"   loading="lazy"/></p>
<p>作成出来たらゾーンについてネームサーバが割り当たる。ゾーンで登録したレコードの情報はこのネームサーバに設定される。</p>
<h3 id="ネームサーバを変更google-domains---google-cloud-dns-service">ネームサーバを変更(Google domains -&gt; Google Cloud DNS Service)</h3>
<p>Google Cloud DNS Serviceでゾーンを作成した時に得られたネームサーバをGoogle Domainsに登録する。</p>
<p>まず、<a href="https://domains.google.com/">Google Domains</a>を開き、ネームサーバを変更する。</p>
<p>
    <img src="/images/vps-server-setup-with-letsencrypt/2019-03-16-21-20-14.png"   loading="lazy"/></p>
<p>この変更は最長1日ぐらいかかる。結構時間がかかった。</p>
<h3 id="google-cloud-dns-serviceの認可情報を作る">Google Cloud DNS Serviceの認可情報を作る</h3>
<p>次にGoogle DNSでDNS登録をプログラムが行えるようにOAuth2認証の準備をする</p>
<p><a href="https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount">https://developers.google.com/identity/protocols/OAuth2ServiceAccount#creatinganaccount</a></p>
<ul>
<li>プロジェクトを作る(fukasawah-devとした)</li>
<li>サービスアカウントを作る（certbotとした）</li>
<li>サービスアカウントの権限を設定する（DNS管理者とした。おそらくこれが必要最小限の権限）</li>
<li>キーの作成を行い、JSONファイルで出力する。これがクレデンシャル情報となる。</li>
</ul>
<p>ここで生成したJSONファイルはこの後使う。</p>
<p>クレデンシャル情報は自分の代わりに操作を許すための認証情報という扱いなので、絶対に人に見せてはいけない。
また、もし漏れた場合でも影響を抑えるため、権限は必要最小限に設定する。</p>
<h3 id="certbotでssl証明書を発行する">certbotでSSL証明書を発行する</h3>
<p><a href="https://docs.docker.com/install/linux/docker-ce/centos/">https://docs.docker.com/install/linux/docker-ce/centos/</a></p>
<p>今回はdockerとcertbotを使う。dockerのほうが環境が汚れなくて精神衛生上よいため。</p>
<pre><code>yum install -y yum-utils device-mapper-persistent-data lvm2
yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo
yum install docker-ce docker-ce-cli containerd.io

systemctl start docker
systemctl enable docker
</code></pre><p>dockerのインストールが終わったら作業ディレクトリを用意する</p>
<pre><code>groupadd letsencrypt
mkdir -p /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt
chmod 0770 /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt
chown root:letsencrypt /etc/letsencrypt /var/lib/letsencrypt /var/log/letsencrypt
</code></pre><p>実行前にGoogle Cloud DNSを操作するための認証情報をJSONファイルで与える必要があるので、先ほどダウンロードしたJSONファイルを送る。</p>
<pre><code>vi /etc/letsencrypt/google.json
chmod 0600 /etc/letsencrypt/google.json
</code></pre><p>ドメインはよしなに置き換える</p>
<pre><code>sudo docker run -it --rm --name certbot \
            -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; \
            -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \
            -v &quot;/var/log/letsencrypt:/var/log/letsencrypt&quot; \
            certbot/dns-google certonly \
  --dns-google \
  --dns-google-credentials /etc/letsencrypt/google.json \
  --dns-google-propagation-seconds 120 \
  -d fukasawah.dev \
  -d *.fukasawah.dev
</code></pre><p>実行すると3つほど尋ねられる。</p>
<ul>
<li>再発行やセキュリティの通知先のEmail</li>
<li>利用規約とその同意</li>
<li>非営利組織Electronic Frontier Foundationの活動を伝えるため、メールアドレスを共有してよいか？（Noでよい）</li>
</ul>
<pre><code>Enter email address (used for urgent renewal and security notices) (Enter 'c' to
cancel): メールアドレスを入力

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Please read the Terms of Service at
https://letsencrypt.org/documents/LE-SA-v1.2-November-15-2017.pdf. You must
agree in order to register with the ACME server at
https://acme-v02.api.letsencrypt.org/directory
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(A)gree/(C)ancel: A

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Would you be willing to share your email address with the Electronic Frontier
Foundation, a founding partner of the Let's Encrypt project and the non-profit
organization that develops Certbot? We'd like to send you email about our work
encrypting the web, EFF news, campaigns, and ways to support digital freedom.
- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
(Y)es/(N)o: N

</code></pre><p>実行後、Cloud DNS上をみると、以下のようにレコードを登録していることが分かる。

    <img src="/images/vps-server-setup-with-letsencrypt/2019-03-17-22-59-38.png"   loading="lazy"/></p>
<p>うまくいくと以下のような形になる。</p>
<pre><code>IMPORTANT NOTES:
 - Congratulations! Your certificate and chain have been saved at:
   /etc/letsencrypt/live/fukasawah.dev/fullchain.pem
   Your key file has been saved at:
   /etc/letsencrypt/live/fukasawah.dev/privkey.pem
   Your cert will expire on 2019-06-15. To obtain a new or tweaked
   version of this certificate in the future, simply run certbot
   again. To non-interactively renew *all* of your certificates, run
   &quot;certbot renew&quot;
 - If you like Certbot, please consider supporting our work by:

   Donating to ISRG / Let's Encrypt:   https://letsencrypt.org/donate
   Donating to EFF:                    https://eff.org/donate-le

</code></pre><p>以下の場所に生成される。<code>fukasawah.dev</code>はドメイン名なので実行する環境で変わる。</p>
<ul>
<li>証明書（CAのみ）: <code>/etc/letsencrypt/live/fukasawah.dev/chain.pem</code></li>
<li>証明書（ドメインのみ）: <code>/etc/letsencrypt/live/fukasawah.dev/cert.pem</code></li>
<li>証明書（CA+ドメイン）: <code>/etc/letsencrypt/live/fukasawah.dev/fullchain.pem</code></li>
<li>秘密鍵: <code>/etc/letsencrypt/live/fukasawah.dev/privkey.pem</code></li>
</ul>
<p>fullchainとprivkeyを良く使うことになるはず。</p>
<p>opensslコマンドで証明書の内容を覗くことができる。</p>
<pre><code>openssl x509 -text /etc/letsencrypt/live/fukasawah.dev/fullchain.pem
</code></pre><p>なお、ファイルパスはシンボリックリンクされており、再発行(renew)してもファイルパスが変わらないように配慮されている。</p>
<p>ちなみに<code>certbot</code>実行時、TXTレコードが反映されるまでデフォルト60秒待つのだけど、それが間に合わなかったのか以下のように失敗することがあった。
なので、<code>--dns-google-propagation-seconds 120</code>オプションを足している。</p>
<pre><code>IMPORTANT NOTES:
 - The following errors were reported by the server:

   Domain: fukasawah.dev
   Type:   unauthorized
   Detail: No TXT record found at _acme-challenge.fukasawah.dev

   To fix these errors, please make sure that your domain name was
   entered correctly and the DNS A/AAAA record(s) for that domain
   contain(s) the right IP address.
 - Your account credentials have been saved in your Certbot
   configuration directory at /etc/letsencrypt. You should make a
   secure backup of this folder now. This configuration directory will
   also contain certificates and private keys obtained by Certbot so
   making regular backups of this folder is ideal.

</code></pre><h3 id="再発行を試す">再発行を試す</h3>
<p>期限が近付いてきたときにちゃんと証明書が更新されるか確認する。</p>
<p>通常はLetsEncryptのAPIのリミットにかからないように、手元の証明書が本当に更新が必要かどうか検証してから行うようになっている。
ただ、それだと再試行まで時間がかかってしまうので、<code>--force-renew</code>オプションで無理やり再発行する。</p>
<pre><code>sudo docker run -it --rm --name certbot \
            -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; \
            -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; \
            -v &quot;/var/log/letsencrypt:/var/log/letsencrypt&quot; \
            certbot/dns-google renew --force-renew
</code></pre><p>うまくいけば、<code>ls -l /etc/letsencrypt/archive/*</code>で証明書と秘密鍵が増えているはず。</p>
<h3 id="cronで自動実行する">cronで自動実行する</h3>
<p>自動化するまでがお仕事です。今回はCronを使う。</p>
<p>cronでrootユーザでrenewを定期的に実行する</p>
<pre><code>sudo crontab -e
</code></pre><p>毎日午前3時12分に実行する。（時間はずらす）</p>
<pre><code>12 3 * * * docker run --rm --name certbot -v &quot;/etc/letsencrypt:/etc/letsencrypt&quot; -v &quot;/var/lib/letsencrypt:/var/lib/letsencrypt&quot; -v &quot;/var/log/letsencrypt:/var/log/letsencrypt&quot; certbot/dns-google renew 
</code></pre><h2 id="nginxの導入とssl証明書の利用">nginxの導入とSSL証明書の利用</h2>
<p>nginxの導入は手抜き</p>
<pre><code>sudo yum install nginx
</code></pre><p><code>sudo vi /etc/nginx/nginx.conf</code></p>
<p>HTTP(tcp/80)は使わないので、この部分を上書きしていく。「</p>
<pre><code>    server {
        listen       80 default_server;
        listen       [::]:80 default_server;

        ...
    }
</code></pre><p>以下のように置き換える。</p>
<pre><code>    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;

        # certs sent to the client in SERVER HELLO are concatenated in ssl_certificate
        ssl_certificate /etc/letsencrypt/live/fukasawah.dev/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/fukasawah.dev/privkey.pem;
        ssl_session_timeout 1d;
        ssl_session_cache shared:SSL:50m;
        ssl_session_tickets off;
        # modern configuration. tweak to your needs.
        ssl_protocols TLSv1.2;
        ssl_ciphers 'ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-SHA384:ECDHE-RSA-AES256-SHA384:ECDHE-ECDSA-AES128-SHA256:ECDHE-RSA-AES128-SHA256';
        ssl_prefer_server_ciphers on;

        # HSTS (ngx_http_headers_module is required) (15768000 seconds = 6 months)
        add_header Strict-Transport-Security max-age=15768000;

        # OCSP Stapling ---
        # fetch OCSP records from URL in ssl_certificate and cache them
        ssl_stapling on;
        ssl_stapling_verify on;

        ## verify chain of trust of OCSP response using Root CA and Intermediate certs
        ssl_trusted_certificate /etc/letsencrypt/live/fukasawah.dev/chain.pem;

        server_name  _;
        root         /usr/share/nginx/html;

        # Load configuration files for the default server block.
        include /etc/nginx/default.d/*.conf;

        location / {
        }

        error_page 404 /404.html;
            location = /40x.html {
        }

        error_page 500 502 503 504 /50x.html;
            location = /50x.html {
        }
    }
</code></pre><p>なお、この元ネタは以下から生成している。
<a href="https://mozilla.github.io/server-side-tls/ssl-config-generator/">https://mozilla.github.io/server-side-tls/ssl-config-generator/</a></p>
<p>以下の行が違うだけで、<code>fukasawah.dev</code>を自ドメインに置き換えればよい。</p>
<ul>
<li><code>ssl_certificate</code></li>
<li><code>ssl_certificate_key</code></li>
<li><code>ssl_trusted_certificate</code></li>
</ul>
<p>設定が終わったら、サーバの起動・自動起動</p>
<pre><code>systemctl start nginx
systemctl enable nginx

systemctl status nginx
</code></pre><p>https(tcp/443)のポートはファイアウォールで塞がれているので、firewalldの設定を変更し、https(tcp/443)からのアクセスを許可する</p>
<pre><code>firewall-cmd --add-service=https --zone=public 
firewall-cmd --add-service=https --zone=public --permanent
</code></pre><p>Chrome等のブラウザでアクセスして表示されればOK</p>
<p>
    <img src="/images/vps-server-setup-with-letsencrypt/2019-03-17-23-35-31.png"   loading="lazy"/></p>
<p>SSLの妥当性もテストしてくれるサービスがあるので、これも試す。
<a href="https://www.ssllabs.com/ssltest/">https://www.ssllabs.com/ssltest/</a></p>
<p>
    <img src="/images/vps-server-setup-with-letsencrypt/2019-03-17-23-40-44.png"   loading="lazy"/></p>
<p>いいですね。</p>
<p>ちなみに、証明書を更新し終わったらnginxもreloadを行わないと反映されない。ので、<code>systemctl reload nginx</code>をcronに入れておくなりすると良いでしょう。</p>
]]></content></item><item><title>GNU ldで一部をスタティックリンクにする</title><link>https://fukasawah.github.io/posts/2019/01/07/a-part-static-link-in-gnu-ld/</link><pubDate>Mon, 07 Jan 2019 03:15:17 +0900</pubDate><guid>https://fukasawah.github.io/posts/2019/01/07/a-part-static-link-in-gnu-ld/</guid><description>tl;dr gccなら-Wl,...でリンク時のオプション(==ldコマンドのオプション)を渡せる。オプションが複数ある場合はカンマで繋げる。 ldのオ</description><content type="html"><![CDATA[<h2 id="tldr">tl;dr</h2>
<p><code>gcc</code>なら<code>-Wl,...</code>でリンク時のオプション(==<code>ld</code>コマンドのオプション)を渡せる。オプションが複数ある場合はカンマで繋げる。</p>
<p><code>ld</code>のオプションで動的(<code>-Bdynamic</code>)と静的(<code>-Bstatic</code>)を選ぶことができ、これは混在させることができる。</p>
<p>例: glibc以外をstatic linkしたい</p>
<pre><code>g++ -o a.out main.o -static-libgcc -static-libstdc++ -Wl,-Bdynamic,-lc,-ldl,-lpthread,-Bstatic,-lboost_program_options,-lboost_filesystem,-lboost_system,-lssl,-lcrypto,-lz
</code></pre><p><code>-lc,-ldl,-lpthread</code>あたりがglibcのライブラリ。</p>
<h2 id="背景">背景</h2>
<p>時代はコンテナや！シングルバイナリのほうが扱い楽やで！！「実行する環境によっては～」なんて考える必要なくなるで！！</p>
<p>という雑な認識で、static linkしていくぞという感じです。詳細は伏せますが、C++でBoost等を扱ってるネットワークアプリケーションです。</p>
<p>最初は軽くググって<code>-static</code>とか<code>-static-libgcc -static-libstdc++</code>辺りをつけておけばそうなるんでしょ？と思っていて、以下のようにやっていた。</p>
<pre><code># g++ -o a.out main.o -lboost_program_options -lboost_filesystem -lboost_system -lpthread -lssl -lcrypto -lz -ldl -static -static-libstdc

...中略
warning: Using 'getaddrinfo' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
warning: Using 'gethostbyname' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
...中略

# ldd a.out
        not a dynamic executable
</code></pre><p>警告が出ながらも実行ファイルが出来てしまう。私は愚かなので「これでうまく動くぞ！」と思った。
しかし、いざコンテナにコピーして実行してみると、通信時に名前解決が出来ずハマった。具体的には、docker-composeで実行した時にコンテナの名前解決ができなかった。
名前解決できていないようなので「/etc/resolve.confかなぁ？」とか「でも中に入ってcurlは実行できたから違いそうだし・・・」とか1日中悩んでた。警告嫁。</p>
<p>原因はglibcのNSS回りだった。</p>
<h3 id="glibcのnssの壁">glibcのNSSの壁</h3>
<p>glibcをstatic linkすると、Name Service Switch(NSS)の都合で名前解決に支障が出るバイナリになる。</p>
<p>調べてみると、<a href="https://sourceware.org/glibc/wiki/FAQ#Even_statically_linked_programs_need_some_shared_libraries_which_is_not_acceptable_for_me.__What_can_I_do.3F">glibcはNSSの都合上、static linkは推奨していないようだ。</a>
（glibcはNSSはリンク時ではなく実行時に解決できるほうが良いとしている。ただ、これでstatic linkは事実上出来ないようなものなので、static linkしようとしたら警告じゃなくてエラーにしてほしい・・・）</p>
<p>NSSをstatic linkで扱う機能はオプショナルで、Fedoraのyumで入れられるglibcパッケージは対応していない。</p>
<p>なので、取れる手は以下の3つらしい。</p>
<ol>
<li>glibcを動的リンクして使う（従来通り）</li>
<li>glibcを<code>--enable-static-nss</code>をつけてrebuildし、必要なサービスを静的リンクする</li>
<li>glibcを辞めてlibc互換ライブラリに置き換える（musl等）</li>
</ol>
<p>今回は(1)の方法を取った。</p>
<p>でも、それだけなら<code>-ldl -static -static-libstdc</code>を外して動的リンクすればよい。</p>
<p>これでは何も新しい事をしていない。なので、glibc以外をstatic linkにしようと考えた。</p>
<p>本来の目的のシングルバイナリ化をするなら(2)と(3)なので、そのうち試したい所&hellip;</p>
<h3 id="リンカーとは">リンカーとは</h3>
<p>ふわっと理解しているつもりで説明すると、C言語、C++ではコンパイル→リンクという流れで成果物（実行ファイル・ライブラリ等）が出来上がる。</p>
<p>例えば「ライブラリの関数を呼ぼうとしたときに、その関数がどこにあるのか？」というのを、コンパイル後に行っている「リンク」のタイミングで解決している。
具体例で言えば、printfはおまじない的に<code>#include &lt;stdio.h&gt;</code>と書いていると使えるが、じゃあ実際にprintfに該当する処理はどこにあるんだ？というのを「リンク」のタイミングで解決する。</p>
<p>「リンク」の作業を行うのが「リンカー」でリンクのやり方は大きく分けてDynamic LinkとStatic Linkがある。</p>
<p>Dynamic Linkなら、ライブラリが実在すればそれでよしとして、成果物に含まれている「実行時に読み込むライブラリ一覧」みたいなものにライブラリ名を記録しておき、実行時に読みに行くような形を取る。成果物には実行時に読むという処理は含まれておらず、<code>ld.so</code>等の「プログラム実行時にライブラリを探すプログラム（動的リンカー）」の力を借りる必要がある。（ちなみにどの動的リンカーを使うかは成果物に含まれている情報から読み取る）</p>
<p>Static Linkなら、ライブラリが持つ実際の処理(関数等)を探して成果物に含める。</p>
<p>実際はもっと複雑な事をやってると思いますが、多分あってるんじゃないかな・・・</p>
<h3 id="リンカーのオプション">リンカーのオプション</h3>
<p><code>gcc</code>はコンパイルのあと、必要であればリンクも（<code>ld</code>コマンドを呼び出して）行う。
この時に<code>ld</code>コマンドのオプションを<code>-Wl,[OPTION],[OPTION],...</code>という感じに渡せる。オプションが複数ある場合はカンマ(<code>,</code>)で繋げる。</p>
<p><code>ld</code>のオプションで動的(<code>-Bdynamic</code>)と静的(<code>-Bstatic</code>)を選ぶことができ、混在させることができる。</p>
<p><code>ld</code>の実行内容が気になる場合、<code>-v,--verbose</code>辺りをつけると少し見えます。どうやってライブラリを探しているのか等が気になる場合につける。</p>
<p>例: glibc以外をstatic linkしたい</p>
<pre><code>g++ -o a.out main.o -static-libgcc -static-libstdc++ -Wl,-Bdynamic,-lc,-ldl,-lpthread,-Bstatic,-lboost_program_options,-lboost_filesystem,-lboost_system,-lssl,-lcrypto,-lz
</code></pre><p><code>-lc,-ldl,-lpthread</code>辺りはglibcに含まれるライブラリでべったり依存しているので、ここら辺は動的リンクにします。</p>
<h3 id="成果">成果</h3>
<p>通常時</p>
<pre><code># g++ -o a.out main.o -Wl,-lpthread,-lboost_program_options,-lboost_filesystem,-lboost_system,-lssl,-lcrypto,-lz
# ldd a.out | sort
        /lib64/ld-linux-x86-64.so.2 (0x00007f9f7d619000)
        libboost_filesystem.so.1.66.0 =&gt; /lib64/libboost_filesystem.so.1.66.0 (0x00007f9f7d54d000)
        libboost_program_options.so.1.66.0 =&gt; /lib64/libboost_program_options.so.1.66.0 (0x00007f9f7d56a000)
        libboost_system.so.1.66.0 =&gt; /lib64/libboost_system.so.1.66.0 (0x00007f9f7d546000)
        libcrypto.so.1.1 =&gt; /lib64/libcrypto.so.1.1 (0x00007f9f7d1d6000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f9f7ccbd000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f9f7ccab000)
        libgcc_s.so.1 =&gt; /lib64/libgcc_s.so.1 (0x00007f9f7ce83000)
        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f9f7ce9e000)
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f9f7d5ed000)
        librt.so.1 =&gt; /lib64/librt.so.1 (0x00007f9f7ccb3000)
        libssl.so.1.1 =&gt; /lib64/libssl.so.1.1 (0x00007f9f7d4b0000)
        libstdc++.so.6 =&gt; /lib64/libstdc++.so.6 (0x00007f9f7d022000)
        libz.so.1 =&gt; /lib64/libz.so.1 (0x00007f9f7d1ba000)
        linux-vdso.so.1 (0x00007ffdf87b5000)
</code></pre><p>一部を静的リンク</p>
<pre><code># g++ -o a.out main.o -static-libgcc -static-libstdc++ -Wl,-Bdynamic,-lc,-ldl,-lpthread,-Bstatic,-lboost_program_options,-lboost_filesystem,-lboost_system,-lssl,-lcrypto,-lz
# ldd a.out | sort
        /lib64/ld-linux-x86-64.so.2 (0x00007fa5d1ed4000)
        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fa5d1d04000)
        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fa5d1cfe000)
        libm.so.6 =&gt; /lib64/libm.so.6 (0x00007fa5d1b58000)
        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fa5d1cdc000)
        linux-vdso.so.1 (0x00007ffcf53cd000)
</code></pre><p>boost等が消えて、4つのライブラリにしか依存していないように見える。良いですね。</p>
<h3 id="おまけnssを考慮する">（おまけ）NSSを考慮する</h3>
<p>が、glibcのNSSの都合で、一部はリンク時ではなく実行時に解決される。実行時のものはlddでも表示されない。</p>
<p>ソースコードを<a href="https://sourceware.org/git/?p=glibc.git;a=blob;f=nss/nsswitch.c;h=ee46f24424bc1ca2085f4fd7f1060ae330ee5bae;hb=437faa9675dd916ac7b239d4584b932a11fbb984#l363"><code>nss/nsswitch.c</code>のこの辺り</a>で<code>/etc/nsswitch.conf</code>に書かれたサービス名(dns等)を使って、ライブラリ名を構築して、ライブラリを読みに行こうとしているのがわかる。</p>
<p>なので、もし、<code>/etc/nsswitch.conf</code>の内容が以下の場合、</p>
<pre><code>hosts: files dns
</code></pre><p>さらに以下を加える必要がある。</p>
<ul>
<li>/lib64/libnss_files-2.28.so</li>
<li>/lib64/libnss_dns-2.28.so</li>
<li>/lib64/libresolv-2.28.so (dnsの依存)</li>
</ul>
<p>もちろん、libresolvといった依存ライブラリがあるモノは一緒に含めないといけない。
あと、ファイルパスは実行環境やglibcのバージョンなどで変わるはずなので、<code>ldd /lib64/libnss_dns-2.28.so</code>等で、いい感じに見極めてください。</p>
<p>依存ライブラリも洗い出せたのでコンテナに持ち込むぞー！となったが、これもまた苦労した。</p>
<h3 id="おまけコンテナを作る">（おまけ）コンテナを作る</h3>
<p>単純にライブラリをコピーしてお終いというわけにはいかなかった。</p>
<p>持ち込み先のコンテナに動的リンカーがない。そんな事があるのか？と思ったらコンテナ界隈では良く知られているらしい。</p>
<p>busyboxはそもそも<code>ld.so</code>が無い。(これは動的リンクが必要なプログラムは実行できない・・・ということ？)</p>
<p>alpineはmuslベースなので<code>ld-musl-x86_64.so.1</code>で<code>ld-linux-x86-64.so.2</code>が無い。</p>
<p>alpineで<code>apk add libc6-compat</code> すればよい、という記事をいくつか見かけて試したが、
これはただ<code>ld-musl-x86_64.so.1</code>へのシンボリックリンクを作るだけであり、私の環境では実行時に以下のようなエラーになってしまう。</p>
<pre><code>/ # /path/to/a.out
Error relocating /path/to/a.out: __fprintf_chk: symbol not found
Error relocating /path/to/a.out: makecontext: symbol not found
Error relocating /path/to/a.out: setcontext: symbol not found
Error relocating /path/to/a.out: __register_atfork: symbol not found
Error relocating /path/to/a.out: __memcpy_chk: symbol not found
Error relocating /path/to/a.out: __strcat_chk: symbol not found
Error relocating /path/to/a.out: secure_getenv: symbol not found
Error relocating /path/to/a.out: __vfprintf_chk: symbol not found
Error relocating /path/to/a.out: __memset_chk: symbol not found
Error relocating /path/to/a.out: getcontext: symbol not found
Error relocating /path/to/a.out: __sprintf_chk: symbol not found
</code></pre><p><code>__memset_chk</code>辺りはglibc固有の実装なので、そんなものは当然muslにはない。</p>
<p><a href="https://hub.docker.com/r/frolvlad/alpine-glibc/">alpine-glibc</a>というイメージを使う手もあるが、オフィシャルではないので使用は避けたい。</p>
<p>色々悩んだけど、そもそもビルド環境からコピーすれば良いよね、という考えに至った。</p>
<p>ということで、dockerfileはこんな感じ。</p>
<div class="highlight"><pre class="chroma"><code class="language-dockerfile" data-lang="dockerfile"><span class="k">FROM</span><span class="s"> mydev:latest as build</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># ... プログラムのビルドを行う</span><span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">FROM</span><span class="s"> busybox</span><span class="err">
</span><span class="err"></span><span class="c"># nsswitch.confを作る(glibcがこれを読みに来る)</span><span class="err">
</span><span class="err"></span><span class="k">RUN</span> <span class="nb">echo</span> <span class="s1">&#39;hosts: files dns&#39;</span> &gt;&gt; /etc/nsswitch.conf<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># ld-linux-x86-64.so.2とプログラムの依存ライブラリ</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /lib64/ld-linux-x86-64.so.2 /lib64/libc.so.6 /lib64/libdl.so.2 /lib64/libm.so.6 /lib64/libpthread.so.0 /lib64<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># glibcが/etc/nsswitch.confを参照して利用する依存ライブラリ</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /lib64/libresolv-2.28.so /lib64/lib/libresolv.so.2<span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /lib64/libnss_dns-2.28.so /lib64/libnss_dns.so.2<span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /lib64/libnss_files-2.28.so /lib64/libnss_files.so.2<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="c"># プログラム</span><span class="err">
</span><span class="err"></span><span class="k">COPY</span> --from<span class="o">=</span>build /usr/local/src/a.out /usr/local/bin/a.out<span class="err">
</span><span class="err">
</span><span class="err"></span><span class="k">CMD</span> <span class="p">[</span><span class="s2">&#34;/usr/local/bin/a.out&#34;</span><span class="p">]</span><span class="err">
</span></code></pre></div><p>蛇足だが、プログラム内部で<code>ld.so</code>の場所を持っているので、コマンドを実行するとちゃんと<code>ld.so</code>を使って動的リンクを行ってくれる。(lddで<code>/lib64/ld-linux-x86-64.so.2</code>と出るなら、これを動的リンカーに使おうとする。この場所に動的リンカーが無い場合はエラーになる)
また、今回のように目的の場所に無い場合は、直接<code>ld.so</code>からプログラムを実行することもできます。もし<code>/lib64</code>ではなく、<code>/usr/local/lib</code>に全部配置した場合はこんな感じ。</p>
<pre><code>CMD [&quot;/usr/local/lib/ld-linux-x86-64.so.2&quot;, &quot;--inhibit-cache&quot;, &quot;--library-path&quot;, &quot;/usr/local/lib&quot;, &quot;/usr/local/bin/a.out&quot;]
</code></pre><h3 id="一部とか中途半端">一部とか中途半端</h3>
<p>はい・・・</p>
<p><code>--enable-static-nss</code>を入れたglibcでstatic linkしたりmuslの置き換えもやってみたい・・・特にmuslはlibstdc++のリビルドが必要そうなのでしんどそう。</p>
<p>glibcはLGPLなので、Static Linkすると都合悪い場合もあるはずなので、使えるのではないかなと思う。</p>
<h2 id="static化で遭遇したエラーたち">static化で遭遇したエラーたち</h2>
<h3 id="cannot-find--lgcc_s"><code>cannot find -lgcc_s</code></h3>
<pre><code>/usr/bin/ld: cannot find -lgcc_s
/usr/bin/ld: cannot find -lgcc_s
</code></pre><p>g++オプションに<code>-static-libgcc</code>をつける。</p>
<h3 id="undefined-reference-to-symbol-__tls_get_addrglibc_23"><code>undefined reference to symbol '__tls_get_addr@@GLIBC_2.3'</code></h3>
<pre><code>/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/libstdc++.a(eh_globals.o): undefined reference to symbol '__tls_get_addr@@GLIBC_2.3'
/usr/bin/ld: //lib64/ld-linux-x86-64.so.2: error adding symbols: DSO missing from command line
collect2: error: ld returned 1 exit status
</code></pre><p>g++オプションに<code>-static-libstdc++</code>をつける。</p>
<h3 id="undefined-reference-to-dlopen"><code>undefined reference to 'dlopen'</code></h3>
<pre><code>/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libcrypto.a(fips.o): in function `verify_checksums':
(.text+0x524): undefined reference to `dlopen'
/usr/bin/ld: (.text+0x53f): undefined reference to `dlsym'
/usr/bin/ld: (.text+0x553): undefined reference to `dladdr'
/usr/bin/ld: (.text+0x562): undefined reference to `dlclose'
/usr/bin/ld: (.text+0x5b2): undefined reference to `dlclose'
/usr/bin/ld: (.text+0x62c): undefined reference to `dlclose'

</code></pre><p>dlopen等はライブラリを実行時に読み込む仕組み。
リンカーオプションに<code>-ldl</code>をつける。これは動的リンクにしないといけない。静的リンクしようとすると、以下のようになりうまくいかない。</p>
<pre><code>
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libcrypto.a(fips.o): in function `verify_checksums':
(.text+0x524): warning: Using 'dlopen' in statically linked applications requires at runtime the shared libraries from the glibc version used for linking
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libdl.a(dlopen.o): in function `dlopen':
(.text+0x9): undefined reference to `__dlopen'
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libdl.a(dlclose.o): in function `dlclose':
(.text+0x5): undefined reference to `__dlclose'
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libdl.a(dlsym.o): in function `dlsym':
(.text+0x9): undefined reference to `__dlsym'
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libdl.a(dlerror.o): in function `dlerror':
(.text+0x5): undefined reference to `__dlerror'
/usr/bin/ld: /usr/lib/gcc/x86_64-redhat-linux/8/../../../../lib64/libdl.a(dladdr.o): in function `dladdr':
(.text+0x5): undefined reference to `__dladdr'
</code></pre><p><code>libdl.a</code>ではdlopenなどは定義されているが、内部で使われている<code>__dlopen</code>などはglibcに依存している。
なので、glibcをstatic linkするか、同バージョンのglibcライブラリを合わせて持ち込む必要がある。</p>
<p>ここらでglibcがLGPLと知ったり、NSS周りの扱いを知ったり、muslの置き換えがうまくいかなかったり、等々を理由に「めんどくさそう」と判断して、一部static linkを目指すことにした。</p>
]]></content></item><item><title>Using HUGO</title><link>https://fukasawah.github.io/posts/2018/12/24/using-hugo/</link><pubDate>Mon, 24 Dec 2018 04:48:16 +0900</pubDate><guid>https://fukasawah.github.io/posts/2018/12/24/using-hugo/</guid><description>HUGO HUGO - https://gohugo.io/ 静的サイトジェネレータ。Markdownを書けばHTMLを作ってくれる。 また、記事の公開には、Github Pagesを使う。Netl</description><content type="html"><![CDATA[<h2 id="hugo">HUGO</h2>
<p>HUGO - <a href="https://gohugo.io/">https://gohugo.io/</a></p>
<p>静的サイトジェネレータ。Markdownを書けばHTMLを作ってくれる。</p>
<p>また、記事の公開には、<a href="https://pages.github.com/">Github Pages</a>を使う。Netlifyも試したいが、こちらの方が手軽そうだったので。</p>
<p>導入のモチベーションとしては、簡単なBlogがほしい、広告嫌、という場合に、これならいい感じに公開できるかも、と思い使い始めた。</p>
<h2 id="導入">導入</h2>
<h3 id="hugoのダウンロード">HUGOのダウンロード</h3>
<p>Windowsの場合、<a href="https://discourse.gohugo.io/t/error-failed-to-create-file-caches-from-configuration-file-exists/15635/18">0.52でcachedir周りのバグがあるらしく使えない模様</a>
そのため、0.51を使用した。</p>
<p>1個のバイナリファイルになっているのでそのまま扱う。
PATHは適当に通す。</p>
<h3 id="サイトを作る">サイトを作る</h3>
<pre><code>hugo new site blog
</code></pre><p>以降は作成したサイトのディレクトリで作業をする</p>
<pre><code>cd blog
</code></pre><h3 id="gitで管理を始める">Gitで管理を始める</h3>
<p>作ったサイトごとにGitリポジトリを作る。</p>
<pre><code>git init
</code></pre><h3 id="テーマを決める">テーマを決める</h3>
<p>1から作るのは手間なので、 <a href="https://themes.gohugo.io/">https://themes.gohugo.io/</a> を見ていい感じのを探す。今回は<a href="https://themes.gohugo.io/hermit/">hermit</a>にした。</p>
<pre><code>git submodule add -b v1.1.0 https://github.com/Track3/hermit.git themes/hermit
echo 'theme = &quot;hermit&quot;' &gt;&gt; config.toml
</code></pre><p>hermitはいくつか設定が必要なので、追記する。
<a href="https://github.com/Track3/hermit/blob/master/exampleSite/config.toml">hermitのサンプルのconfig.toml</a>を参考に以下のようにした。</p>
<p><code>dateform*</code>辺りは必須。<code>/posts/</code>のmenuもあったほうがよい。</p>
<pre><code>cat &lt;&lt; '__EOF__' &gt;&gt; config.toml
[Params]
  dateform        = &quot;Jan 2, 2006&quot;
  dateformShort   = &quot;Jan 2&quot;
  dateformNum     = &quot;2006-01-02&quot;
  dateformNumTime = &quot;2006-01-02 15:04 -0700&quot;

  homeSubtitle = &quot;I feel like to be lazy&quot;

  justifyContent = false

[menu]
  [[menu.main]]
    name = &quot;Posts&quot;
    url = &quot;/posts/&quot;
    weight = 10

__EOF__
</code></pre><p>テーマは色々設定がある場合があるため、テーマを使う場合はこの辺りを注意する（dateform当たりの設定がないせいで後述のローカル起動で失敗して困っていた）</p>
<p>下地はここまで。</p>
<h2 id="github-pages用のリポジトリを作る">GitHub Pages用のリポジトリを作る</h2>
<p>*.github.ioというリポジトリを作っておくと、<a href="https://pages.github.com/">Github Pages</a>で見ることができるようになる。</p>
<p>このリポジトリにHTMLなどで作られたファイルを管理するだけで、Github Pagesの機能でホスティングされ、インターネット上に公開される。</p>
<p>今回はHUGOで出来た成果物を、このGitHub Pagesで公開するようにする。</p>
<h3 id="リポジトリを作成する">リポジトリを作成する</h3>
<p><code>ユーザ名.github.io</code>という形を取る必要がある。fukasawahというidなら<code>fukasawah.github.io</code>という感じ。</p>
<p>1個はcommitが無いとsubmodule登録できないので、index.html辺りを作っておく。</p>
<p>README.md でもよいが、その場合は後で削除する必要がある。github.ioはREADME.md &gt; index.htmlの順でトップを表示するため。</p>
<p>README.mdかindex.htmlが作成できたら、<code>https://ユーザ名.github.io</code>という形でアクセスできるか一度ブラウザで確認する。</p>
<p>反映までタイムラグがあるので、1分ほど待って確認する。</p>
<h3 id="リポジトリをサブモジュールとして登録する">リポジトリをサブモジュールとして登録する</h3>
<pre><code>git submodule add https://github.com/fukasawah/ユーザ名.github.io.git public
</code></pre><h3 id="configtomlのbaseurlを修正する">config.tomlのbaseURLを修正する</h3>
<p>テーマによってはこの変数を元に作る場合があるので、直す。</p>
<pre><code>baseURL = &quot;https://ユーザ名.github.io/&quot;
</code></pre><h2 id="記事を作成">記事を作成</h2>
<h3 id="記事を作成-1">記事を作成</h3>
<pre><code>hugo new posts/using-hugo.md
</code></pre><p><code>content/posts/using-hugo.md</code> が出来上がるので、MarkDowkで書いていく。</p>
<pre><code>---
title: &quot;Using HUGO&quot;
date: 2018-12-24T04:48:16+09:00
draft: false
featuredImg: &quot;&quot;
tags:
  - HUGO
---

HUGO
--------------

HUGO - https://gohugo.io/

サイトジェネレータ。Markdownを書けばHTMLを作ってくれる。

</code></pre><p>というかんじで。最初の数行はメタ情報でなんとなく何を意味するかわかるはず。</p>
<ul>
<li><code>draft</code>がtrueの場合、デフォルトだと対象にならない(HTMLが生成されない)なので、適宜手でfalseにする必要がありそう。</li>
</ul>
<h3 id="表示確認">表示確認</h3>
<p><code>hugo server</code>により、手元で簡単に表示の確認を行える。</p>
<p><code>http://localhost:1313/</code> にアクセスすると見れる。</p>
<p><code>draft:true</code>の記事も含めたい場合は、<code>hugo server -D</code>という形に<code>-D</code>オプションを付け足す。</p>
<p>なお、デフォルトで保存を検知してブラウザ側で自動リロードをかけてくれる。</p>
<h3 id="ビルドを行う">ビルドを行う</h3>
<pre><code>hugo
</code></pre><p><code>public</code>ディレクトリの下に生成されたファイルが並ぶ。</p>
<h3 id="ビルドを行いgithubioのリモートリポジトリに反映する">ビルドを行い、github.ioのリモートリポジトリに反映する</h3>
<p><code>hugo</code>を実行すると、draftになっていないものを対象に、<code>public</code>ディレクトリの下にファイルが生成される。</p>
<p>後は生成されたpublicの中身をcommit&amp;pushする。
submoduleとはいえ、中身はGitリポジトリなので、普通にGitの操作でよい。</p>
<pre><code>(
  hugo &amp;&amp; \
  cd public &amp;&amp; \
  git add . &amp;&amp; \
  git commit -m &quot;Update&quot; &amp;&amp; \
  git push
)
</code></pre><p>反映までタイムラグがあるので、その時は少し待って確認する。</p>
<p>良く使うはずなので、<code>.bash_profile</code>等にaliasを作っておくと良い。</p>
<pre><code>alias hugo-publish='(hugo &amp;&amp; cd public &amp;&amp; git add . &amp;&amp; git commit -m &quot;Update&quot; &amp;&amp; git push)'
</code></pre><h3 id="元の記事もローカルリポジトリにコミットする">元の記事もローカルリポジトリにコミットする</h3>
<p>元のMarkdownや設定が管理されていないので、このタイミングで管理する。publicも含めてしまってよい。</p>
<pre><code>git add .
git commit -m &quot;Update&quot;
</code></pre><p>（不明点: resources配下に生成されたファイルも含まれてしまうがこれは良いのか？）</p>
<p>後は、必要に応じてリモートリポジトリを作りPushしておくと、他の端末からでもHUGOがあれば同じ環境を使うことができるようになる。</p>
<h3 id="おわり">おわり</h3>
<p>これでHUGO+GitHub Pagesで簡単なBlogを書くことができるようになった。</p>
<p>今回の成果物は以下。</p>
<ul>
<li>HUGO以外の完全なコード: <a href="https://github.com/fukasawah/blog">https://github.com/fukasawah/blog</a></li>
<li>GitHub Pages用リポジトリ: <a href="https://github.com/fukasawah/fukasawah.github.io">https://github.com/fukasawah/fukasawah.github.io</a></li>
<li>GitHub Pages: <a href="https://fukasawah.github.io">https://fukasawah.github.io</a></li>
</ul>
<h2 id="おまけ">おまけ</h2>
<h3 id="投稿に画像の貼り付けを行いたい">投稿に画像の貼り付けを行いたい</h3>
<p>hugoはデフォルトで<code>static</code>配下のディレクトリとファイルを、そのまま<code>public</code>に配置する模様。</p>
<p>なので、<code>static/foo/image.jpg</code>とおいておけば、<code>![](/foo/image.jpg)</code>で表示ができるようになる。</p>
<p>また、VSCode で <a href="https://marketplace.visualstudio.com/items?itemName=mushan.vscode-paste-image">Paste Imageという拡張機能</a>を使っている場合、以下の設定を行っておくと、ファイルは<code>static/images/Postのファイル名/タイムスタンプ.png</code>、Markdownには<code>![](/images/ファイル名/タイムスタンプ.png)</code>が張り付けられるようになり、良い感じになる。（絶対パスになっているので、URLの構造に注意）</p>
<p>設定はWorkspace毎に設定できるので、hugoを使っている環境にだけ適用したい、という事もできる。（ディレクトリのルートの<code>.vscode/settings.json</code>に書くだけ）</p>
<pre><code>{
    &quot;pasteImage.path&quot;: &quot;${projectRoot}/static/images/${currentFileNameWithoutExt}&quot;,
    &quot;pasteImage.insertPattern&quot;: &quot;${imageSyntaxPrefix}/images/${currentFileNameWithoutExt}/${imageFileName}${imageSyntaxSuffix}&quot;
}
</code></pre><p>以下は画像。貼り付けのお試し。</p>
<p>
    <img src="/images/using-hugo/2018-12-25-16-45-13.png"   loading="lazy"/></p>
]]></content></item></channel></rss>